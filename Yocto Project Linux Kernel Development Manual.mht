From: =?gb2312?B?0tHTySBJbnRlcm5ldCBFeHBsb3JlciAxMSCxo7Tm?=
Subject: Yocto Project Linux Kernel Development Manual
Date: Mon, 15 Aug 2016 09:54:19 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01D1F6DA.FE395A50"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01D1F6DA.FE395A50
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!--?xml version=3D"1.0" encoding=3D"UTF-8"?--><!DOCTYPE html PUBLIC =
"-//W3C//DTD XHTML 1.0 Transitional//EN" =
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><HTML=20
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><META =
content=3D"IE=3D11.0000"=20
http-equiv=3D"X-UA-Compatible">

<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3DUTF-8"><TITLE>Yocto=20
Project Linux Kernel Development Manual</TITLE><LINK =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev-style.=
css"=20
rel=3D"stylesheet" type=3D"text/css">
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.9600.18098">
<SCRIPT> =
(function(e,t,n,r,i,s,o){e["GoogleAnalyticsObject"]=3Di;e[i]=3De[i]||func=
tion(){(e[i].q=3De[i].q||[]).push(arguments)},e[i].l=3D1*new =
Date;s=3Dt.createElement(n),o=3Dt.getElementsByTagName(n)[0];s.async=3D1;=
s.src=3Dr;o.parentNode.insertBefore(s,o)})(window,document,"script","//ww=
w.google-analytics.com/analytics.js","ga");ga("create","UA-19330424-1","y=
octoproject.org");ga("send","pageview"); </SCRIPT>
</HEAD>
<BODY>
<DIV title=3D"Yocto Project Linux Kernel Development Manual" =
class=3D"book" lang=3D"en"=20
lang=3D"en" xml:lang=3D"en">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H1 class=3D"title"><A id=3D"kernel-dev"></A>		  Yocto Project Linux =
Kernel=20
Development Manual		 </H1></DIV>
<DIV>
<DIV class=3D"authorgroup">
<DIV class=3D"author">
<H3 class=3D"author"><SPAN class=3D"firstname">Darren</SPAN> <SPAN=20
class=3D"surname">Hart</SPAN></H3>
<DIV class=3D"affiliation"><SPAN class=3D"orgname">Intel =
Corporation<BR></SPAN>     =20
           </DIV><CODE class=3D"email">&lt;<A class=3D"email" =
href=3D"mailto:darren.hart@intel.com">darren.hart@intel.com</A>&gt;</CODE=
></DIV></DIV></DIV>
<DIV>
<P class=3D"copyright">Copyright =C2=A9 2010-2016 Linux =
Foundation</P></DIV>
<DIV>
<DIV title=3D"Legal Notice" class=3D"legalnotice"><A =
id=3D"idm46153758139776"></A>    =20
 =20
<P>        Permission is granted to copy, distribute and/or modify this =
document=20
under        the terms of the <A class=3D"ulink" =
href=3D"http://creativecommons.org/licenses/by-sa/2.0/uk/"=20
target=3D"_top">Creative Commons Attribution-Share Alike 2.0 UK: England =
&amp;=20
Wales</A> as published by Creative Commons.       </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>          For the latest version of this =
manual=20
associated with this          Yocto Project release, see the           =
<A class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html" =
target=3D"_top">Yocto=20
Project Linux Kernel Development Manual</A>          from the Yocto =
Project=20
website.       </DIV></DIV></DIV>
<DIV>
<DIV class=3D"revhistory">
<TABLE width=3D"100%" border=3D"1" summary=3D"Revision history">
  <TBODY>
  <TR>
    <TH align=3D"left" valign=3D"top" colspan=3D"2"><STRONG>Revision=20
    History</STRONG></TH></TR>
  <TR>
    <TD align=3D"left">Revision 1.4</TD>
    <TD align=3D"left">April 2013</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 1.4 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 1.5</TD>
    <TD align=3D"left">October 2013</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 1.5 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 1.5.1</TD>
    <TD align=3D"left">January 2014</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project =
1.5.1=20
    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 1.6</TD>
    <TD align=3D"left">April 2014</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 1.6 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 1.7</TD>
    <TD align=3D"left">October 2014</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 1.7 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 1.8</TD>
    <TD align=3D"left">April 2015</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 1.8 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 2.0</TD>
    <TD align=3D"left">October 2015</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 2.0 =

    Release.</TD></TR>
  <TR>
    <TD align=3D"left">Revision 2.1</TD>
    <TD align=3D"left">April 2016</TD></TR>
  <TR>
    <TD align=3D"left" colspan=3D"2">Released with the Yocto Project 2.1 =

    Release.</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>
</DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"chapter"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-intro">1.=20
  Introduction</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-overview">1.1.=20
    Overview</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-other-resources">1.2.=20
    Other Resources</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"chapter"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-common">2.=20
  Common Tasks</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-and-preparing-a-layer">2.1.=20
    Creating and Preparing a Layer</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe">2.2.=20
    Modifying an Existing Recipe</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-the-append-file">2.2.1.=20
      Creating the Append File</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
pplying-patches">2.2.2.=20
      Applying Patches</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration">2.2.3.=20
      Changing the Configuration</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-in-tree-defconfig-file">2.2.4.=20
      Using an "In-Tree"&nbsp;&nbsp;<CODE =
class=3D"filename">defconfig</CODE>=20
      File</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-iterative-development-process">2.3.=20
    Using an Iterative Development Process</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ip-dirty-string">2.3.1.=20
      "-dirty" String</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">2.3.2.=20
      Generating Configuration Files</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-source-code">2.3.3.=20
      Modifying Source Code</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-your-own-sources">2.4.=20
    Working With Your Own Sources</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-out-of-tree-modules">2.5.=20
    Working with Out-of-Tree Modules</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uilding-out-of-tree-modules-on-the-target">2.5.1.=20
      Building Out-of-Tree Modules on the Target</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
ncorporating-out-of-tree-modules">2.5.2.=20
      Incorporating Out-of-Tree Modules</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
nspecting-changes-and-commits">2.6.=20
    Inspecting Changes and Commits</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
hat-changed-in-a-kernel">2.6.1.=20
      What Changed in a Kernel?</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
howing-a-particular-feature-or-branch-change">2.6.2.=20
      Showing a Particular Feature or Branch =
Change</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
dding-recipe-space-kernel-features">2.7.=20
    Adding Recipe-Space Kernel Features</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"chapter"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-advanced">3.=20
  Working with Advanced Metadata</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-advanced-overview">3.1.=20
    Overview</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-kernel-metadata-in-a-recipe">3.2.=20
    Using Kernel Metadata in a Recipe</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-location">3.3.=20
    Kernel Metadata Location</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#r=
ecipe-space-metadata">3.3.1.=20
      Recipe-Space Metadata</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
etadata-outside-the-recipe-space">3.3.2.=20
      Metadata Outside the Recipe-Space</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-syntax">3.4.=20
    Kernel Metadata Syntax</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
onfiguration">3.4.1.=20
      Configuration</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#p=
atches">3.4.2.=20
      Patches</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eatures">3.4.3.=20
      Features</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types">3.4.4.=20
      Kernel Types</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">3.4.5.=20
      BSP Descriptions</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#o=
rganizing-your-source">3.5.=20
    Organizing Your Source</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#e=
ncapsulating-patches">3.5.1.=20
      Encapsulating Patches</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
achine-branches">3.5.2.=20
      Machine Branches</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eature-branches">3.5.3.=20
      Feature Branches</A></SPAN></DT></DL></DD>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
cc-reference">3.6.=20
    SCC Description File Reference</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"appendix"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-concepts-appx">A.=20
  Advanced Kernel Concepts</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-big-picture">A.1.=20
    Yocto Project Kernel Development and Maintenance</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-architecture">A.2.=20
    Kernel Architecture</A></SPAN></DT>
    <DD>
    <DL>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
rchitecture-overview">A.2.1.=20
      Overview</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
ranching-and-workflow">A.2.2.=20
      Branching Strategy and Workflow</A></SPAN></DT>
      <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
ource-code-manager-git">A.2.3.=20
      Source Code Manager - Git</A></SPAN></DT></DL></DD></DL></DD>
  <DT><SPAN class=3D"appendix"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-maint-appx">B.=20
  Kernel Maintenance</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ree-construction">B.1.=20
    Tree Construction</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uild-strategy">B.2.=20
    Build Strategy</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"appendix"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-faq">C.=20
  Kernel Development FAQ</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-faq-section">C.1.=20
    Common Questions and Solutions</A></SPAN></DT></DL></DD></DL></DIV>
<DIV title=3D"Chapter&nbsp;1.&nbsp;Introduction" class=3D"chapter">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A=20
id=3D"kernel-dev-intro"></A>Chapter&nbsp;1.&nbsp;Introduction<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-intro"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-overview">1.1.=20
  Overview</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-other-resources">1.2.=20
  Other Resources</A></SPAN></DT></DL></DIV>
<DIV title=3D"1.1.&nbsp;Overview" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-dev-overview"></A>1.1.&nbsp;Overview<SPAN =
class=3D"permalink"><A title=3D"Permalink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-overview"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            Regardless of how you intend to make use of the Yocto =
Project,   =20
        chances are you will work with the Linux kernel.            This =
manual=20
provides background information on the Yocto Linux kernel             <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#m=
etadata"=20
target=3D"_top">Metadata</A>,            describes common tasks you can =
perform=20
using the kernel tools,            and shows you how to use the kernel =
Metadata=20
needed to work with            the kernel inside the Yocto Project.      =
  </P>
<P>            Each Yocto Project release has a set of linux-yocto =
recipes,=20
whose            Git repositories you can view in the Yocto             =
<A=20
class=3D"ulink" href=3D"http://git.yoctoproject.org/" =
target=3D"_top">Source=20
Repositories</A> under            the "Yocto Linux Kernel" heading.      =
     =20
New recipes for the release track the latest upstream developments       =
    =20
and introduce newly-supported platforms.            Previous recipes in =
the=20
release are refreshed and supported for at            least one =
additional=20
release.            As they align, these previous releases are updated =
to=20
include the            latest from the             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/organization/long-term-support-initia=
tive-ltsi"=20
target=3D"_top">Long Term Support Initiative</A>            (LTSI) =
project.       =20
    Also included is a linux-yocto development recipe            (<CODE =
class=3D"filename">linux-yocto-dev.bb</CODE>)=20
should you want to work            with the very latest in upstream =
Linux kernel=20
development and            kernel Metadata development.         </P>
<P>            The Yocto Project also provides a powerful set of kernel  =
       =20
  tools for managing Linux kernel sources and configuration data.        =
    You=20
can use these tools to make a single configuration change,            =
apply=20
multiple patches, or work with your own kernel sources.         </P>
<P>            In particular, the kernel tools allow you to generate=20
configuration            fragments that specify only what you must, and =
nothing=20
more.            Configuration fragments only need to contain the =
highest level =20
          visible <CODE class=3D"filename">CONFIG</CODE> options as =
presented by=20
the Linux            kernel <CODE class=3D"filename">menuconfig</CODE> =
system.    =20
       Contrast this against a complete Linux kernel             <CODE =
class=3D"filename">.config</CODE>,=20
which includes all the automatically            selected <CODE=20
class=3D"filename">CONFIG</CODE> options.            This efficiency =
reduces your=20
maintenance effort and allows you            to further separate your=20
configuration in ways that make sense for            your project.       =
     A=20
common split separates policy and hardware.            For example, all =
your=20
kernels might support            the <CODE =
class=3D"filename">proc</CODE> and=20
<CODE class=3D"filename">sys</CODE> filesystems,            but only =
specific=20
boards require sound, USB, or specific drivers.            Specifying =
these=20
configurations individually allows you to aggregate            them =
together as=20
needed, but maintains them in only one place.            Similar logic =
applies=20
to separating source changes.         </P>
<P>            If you do not maintain your own kernel sources and need =
to make  =20
         only minimal changes to the sources, the released recipes =
provide a    =20
       vetted base upon which to layer your changes.            Doing so =
allows=20
you to benefit from the continual kernel            integration and =
testing=20
performed during development of the            Yocto Project.         =
</P>
<P>            If, instead, you have a very specific Linux kernel source =
tree   =20
        and are unable to align with one of the official linux-yocto     =
      =20
recipes, an alternative exists by which you can use the Yocto            =
Project=20
Linux kernel tools with your own kernel sources.         </P></DIV>
<DIV title=3D"1.2.&nbsp;Other Resources" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-dev-other-resources"></A>1.2.&nbsp;Other Resources<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-other-resources"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            The sections that follow provide instructions for =
completing     =20
      specific Linux kernel development tasks.            These =
instructions=20
assume you are comfortable working with             <A class=3D"ulink" =
href=3D"http://openembedded.org/wiki/Bitbake"=20
target=3D"_top">BitBake</A>            recipes and basic open-source =
development=20
tools.            Understanding these concepts will facilitate the =
process of=20
working            with the kernel recipes.            If you find you =
need some=20
additional background, please be sure to            review and =
understand the=20
following documentation:             </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/yocto-project-qs/yocto-proje=
ct-qs.html"=20
  target=3D"_top">Yocto Project Quick Start</A>                     =
</P></LI>
  <LI class=3D"listitem">
  <P>The "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#d=
ev-modifying-source-code"=20
  target=3D"_top">Modifying Source Code</A>"                    section =
in the=20
  Yocto Project Development Manual                     </P></LI>
  <LI class=3D"listitem">
  <P>The "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#u=
nderstanding-and-creating-layers"=20
  target=3D"_top">Understanding and Creating Layers</A>" section         =
         =20
   in the Yocto Project Development Manual</P></LI>
  <LI class=3D"listitem">
  <P>The "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#m=
odifying-the-kernel"=20
  target=3D"_top">Modifying the Kernel</A>" section                    =
in the=20
  Yocto Project Development Manual.</P></LI></UL></DIV>
<P></P>
<P>            Finally, while this document focuses on the manual =
creation of   =20
        recipes, patches, and configuration files, the Yocto Project     =
      =20
Board Support Package (BSP) tools are available to automate            =
this=20
process with existing content and work well to create the            =
initial=20
framework and boilerplate code.            For details on these tools, =
see the  =20
         "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/bsp-guide/bsp-guide.html#usi=
ng-the-yocto-projects-bsp-tools"=20
target=3D"_top">Using the Yocto Project's BSP Tools</A>"            =
section in the=20
Yocto Project Board Support Package (BSP) Developer's            Guide.  =
      =20
</P></DIV></DIV>
<DIV title=3D"Chapter&nbsp;2.&nbsp;Common Tasks" class=3D"chapter">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A =
id=3D"kernel-dev-common"></A>Chapter&nbsp;2.&nbsp;Common=20
Tasks<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-common"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-and-preparing-a-layer">2.1.=20
  Creating and Preparing a Layer</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe">2.2.=20
  Modifying an Existing Recipe</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-the-append-file">2.2.1.=20
    Creating the Append File</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
pplying-patches">2.2.2.=20
    Applying Patches</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration">2.2.3.=20
    Changing the Configuration</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-in-tree-defconfig-file">2.2.4.=20
    Using an "In-Tree"&nbsp;&nbsp;<CODE =
class=3D"filename">defconfig</CODE>=20
    File</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-iterative-development-process">2.3.=20
  Using an Iterative Development Process</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ip-dirty-string">2.3.1.=20
    "-dirty" String</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">2.3.2.=20
    Generating Configuration Files</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-source-code">2.3.3.=20
    Modifying Source Code</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-your-own-sources">2.4.=20
  Working With Your Own Sources</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-out-of-tree-modules">2.5.=20
  Working with Out-of-Tree Modules</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uilding-out-of-tree-modules-on-the-target">2.5.1.=20
    Building Out-of-Tree Modules on the Target</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
ncorporating-out-of-tree-modules">2.5.2.=20
    Incorporating Out-of-Tree Modules</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
nspecting-changes-and-commits">2.6.=20
  Inspecting Changes and Commits</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
hat-changed-in-a-kernel">2.6.1.=20
    What Changed in a Kernel?</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
howing-a-particular-feature-or-branch-change">2.6.2.=20
    Showing a Particular Feature or Branch =
Change</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
dding-recipe-space-kernel-features">2.7.=20
  Adding Recipe-Space Kernel Features</A></SPAN></DT></DL></DIV>
<P>    This chapter presents several common tasks you perform when you   =
 work=20
with the Yocto Project Linux kernel.    These tasks include preparing a =
layer,=20
modifying an existing recipe,    iterative development, working with =
your own=20
sources, and incorporating    out-of-tree modules.     </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>        The examples presented in this =
chapter work=20
with the Yocto Project        1.2.2 Release and forward.     </DIV>
<P></P>
<DIV title=3D"2.1.&nbsp;Creating and Preparing a Layer" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"creating-and-preparing-a-layer"></A>2.1.&nbsp;Creating and =
Preparing a=20
Layer<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-and-preparing-a-layer"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            If you are going to be modifying kernel recipes, it is=20
recommended            that you create and prepare your own layer in =
which to do=20
your            work.            Your layer contains its own             =
<A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#b=
itbake-term"=20
target=3D"_top">BitBake</A>            append files            (<CODE =
class=3D"filename">.bbappend</CODE>)=20
and provides a convenient            mechanism to create your own recipe =
files  =20
         (<CODE class=3D"filename">.bb</CODE>).            For details =
on how to=20
create and work with layers, see the following            sections in =
the Yocto=20
Project Development Manual:             </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>"<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#u=
nderstanding-and-creating-layers"=20
  target=3D"_top">Understanding and Creating Layers</A>" for             =
      =20
  general information on layers and how to create layers.</P></LI>
  <LI class=3D"listitem">
  <P>"<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#s=
et-up-your-layer-for-the-build"=20
  target=3D"_top">Set Up Your Layer for the Build</A>" for               =
    =20
  specific instructions on setting up a layer for kernel                 =
  =20
  development.</P></LI></UL></DIV>
<P></P></DIV>
<DIV title=3D"2.2.&nbsp;Modifying an Existing Recipe" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"modifying-an-existing-recipe"></A>2.2.&nbsp;Modifying an Existing=20
Recipe<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            In many cases, you can customize an existing linux-yocto =
recipe=20
to            meet the needs of your project.            Each release of =
the=20
Yocto Project provides a few Linux            kernel recipes from which =
you can=20
choose.            These are located in the             <A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#s=
ource-directory"=20
target=3D"_top">Source Directory</A>            in <CODE=20
class=3D"filename">meta/recipes-kernel/linux</CODE>.         </P>
<P>            Modifying an existing recipe can consist of the =
following:       =20
     </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>Creating the append file</P></LI>
  <LI class=3D"listitem">
  <P>Applying patches</P></LI>
  <LI class=3D"listitem">
  <P>Changing the configuration</P></LI></UL></DIV>
<P></P>
<P>            Before modifying an existing recipe, be sure that you =
have=20
created            a minimal, custom layer from which you can work.      =
     =20
See the "<A title=3D"2.1.&nbsp;Creating and Preparing a Layer" =
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-and-preparing-a-layer">Creating=20
and Preparing a Layer</A>"            section for some general =
resources.       =20
    You can also see the            "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#s=
et-up-your-layer-for-the-build"=20
target=3D"_top">Set Up Your Layer for the Build</A>" section            =
of the=20
Yocto Project Development Manual for a detailed            example.      =
   </P>
<DIV title=3D"2.2.1.&nbsp;Creating the Append File" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"creating-the-append-file"></A>2.2.1.&nbsp;Creating the=20
Append File<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
reating-the-append-file"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                You create this file in your custom layer.            =
    You=20
also name it accordingly based on the linux-yocto recipe                =
you are=20
using.                For example, if you are modifying the              =
  =20
<CODE =
class=3D"filename">meta/recipes-kernel/linux/linux-yocto_3.19.bb</CODE>  =
   =20
          recipe, the append file will typically be located as follows   =
       =20
     within your custom layer:                 </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>your-layer</CODE></EM>/recipes-kernel/linux/l=
inux-yocto_3.19.bbappend=0A=
                </PRE>
<P>                The append file should initially extend the           =
     =20
<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESPATH"=20
target=3D"_top"><CODE class=3D"filename">FILESPATH</CODE></A>            =
    search=20
path by prepending the directory that contains your                files =
to the =20
               <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESEXTRAPATHS"=20
target=3D"_top"><CODE class=3D"filename">FILESEXTRAPATHS</CODE></A>      =
         =20
variable as follows:                 </P>
<PRE class=3D"literallayout">     FILESEXTRAPATHS_prepend :=3D =
"${THISDIR}/${PN}:"=0A=
                </PRE>
<P>                The path <CODE class=3D"filename">${</CODE><A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-THISDIR"=20
target=3D"_top"><CODE class=3D"filename">THISDIR</CODE></A><CODE=20
class=3D"filename">}/${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PN"=20
target=3D"_top"><CODE class=3D"filename">PN</CODE></A><CODE=20
class=3D"filename">}</CODE>                expands to "linux-yocto" in =
the current=20
directory for this                example.                If you add any =
new=20
files that modify the kernel recipe and you                have extended =
<CODE=20
class=3D"filename">FILESPATH</CODE> as                described above, =
you must=20
place the files in your layer in the                following area:      =
       =20
   </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>your-layer</CODE></EM>/recipes-kernel/linux/l=
inux-yocto/=0A=
                </PRE>
<P></P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>If you are working on a new machine Board =
Support=20
Package                    (BSP), be sure to refer to the                =
     <A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/bsp-guide/bsp-guide.html"=20
target=3D"_top">Yocto Project Board Support Package (BSP) Developer's =
Guide</A>.  =20
              </DIV>
<P></P></DIV>
<DIV title=3D"2.2.2.&nbsp;Applying Patches" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"applying-patches"></A>2.2.2.&nbsp;Applying =
Patches<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
pplying-patches"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                If you have a single patch or a small series of =
patches      =20
         that you want to apply to the Linux kernel source, you          =
     =20
can do so just as you would with any other recipe.                You =
first copy=20
the patches to the path added to                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESEXTRAPATHS"=20
target=3D"_top"><CODE class=3D"filename">FILESEXTRAPATHS</CODE></A>      =
         =20
in your <CODE class=3D"filename">.bbappend</CODE> file as described in   =
         =20
   the previous section, and then reference them in                 <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>              =
 =20
statements.             </P>
<P>                For example, you can apply a three-patch series by =
adding the=20
               following lines to your linux-yocto                 <CODE =
class=3D"filename">.bbappend</CODE>=20
file in your layer:                 </P>
<PRE class=3D"literallayout">     SRC_URI +=3D =
"file://0001-first-change.patch"=0A=
     SRC_URI +=3D "file://0002-second-change.patch"=0A=
     SRC_URI +=3D "file://0003-third-change.patch"=0A=
                </PRE>
<P>                The next time you run BitBake to build the Linux =
kernel,     =20
          BitBake detects the change in the recipe and fetches and       =
       =20
 applies the patches before building the kernel.             </P>
<P>                For a detailed example showing how to patch the =
kernel, see=20
the                "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#p=
atching-the-kernel"=20
target=3D"_top">Patching the Kernel</A>"                section in the =
Yocto=20
Project Development Manual.             </P></DIV>
<DIV title=3D"2.2.3.&nbsp;Changing the Configuration" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"changing-the-configuration"></A>2.2.3.&nbsp;Changing=20
the Configuration<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                You can make wholesale or incremental changes to the =
final   =20
             <CODE class=3D"filename">.config</CODE> file used for the =
eventual   =20
            Linux kernel configuration by including a                 =
<CODE=20
class=3D"filename">defconfig</CODE> file and by specifying               =
=20
configuration fragments in the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>              =
  to be=20
applied to that file.             </P>
<P>                If you have a complete, working Linux kernel          =
      =20
<CODE class=3D"filename">.config</CODE>                file you want to =
use for=20
the configuration, as before, copy                that file to the =
appropriate=20
<CODE class=3D"filename">${PN}</CODE>                directory in your =
layer's    =20
            <CODE class=3D"filename">recipes-kernel/linux</CODE> =
directory,       =20
        and rename the copied file to "defconfig".                Then, =
add the=20
following lines to the linux-yocto                 <CODE=20
class=3D"filename">.bbappend</CODE> file in your layer:                 =
</P>
<PRE class=3D"literallayout">     FILESEXTRAPATHS_prepend :=3D =
"${THISDIR}/${PN}:"=0A=
     SRC_URI +=3D "file://defconfig"=0A=
                </PRE>
<P>                The <CODE class=3D"filename">SRC_URI</CODE> tells the =
build=20
system how to                search for the file, while the              =
   <A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESEXTRAPATHS"=20
target=3D"_top"><CODE class=3D"filename">FILESEXTRAPATHS</CODE></A>      =
         =20
extends the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESPATH"=20
target=3D"_top"><CODE class=3D"filename">FILESPATH</CODE></A>            =
   =20
variable (search directories) to include the                 <CODE =
class=3D"filename">${PN}</CODE>=20
directory you created to hold the                configuration changes.  =
       =20
   </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                The build system applies =
the=20
configurations from the                 <CODE =
class=3D"filename">defconfig</CODE>=20
file before applying any                subsequent configuration =
fragments.     =20
          The final kernel configuration is a combination of the         =
      =20
configurations in the <CODE class=3D"filename">defconfig</CODE> file and =
         =20
     any configuration fragments you provide.                You need to =
realize=20
that if you have any configuration                fragments, the build =
system=20
applies these on top of and                after applying the existing =
<CODE=20
class=3D"filename">defconfig</CODE>                file configurations.  =
         =20
 </DIV>
<P>                Generally speaking, the preferred approach is to =
determine=20
the                incremental change you want to make and add that as a =
       =20
       configuration fragment.                For example, if you want =
to add=20
support for a basic serial                console, create a file named =
<CODE=20
class=3D"filename">8250.cfg</CODE> in                the <CODE=20
class=3D"filename">${PN}</CODE> directory with the following             =
  =20
content (without indentation):                 </P>
<PRE class=3D"literallayout">     CONFIG_SERIAL_8250=3Dy=0A=
     CONFIG_SERIAL_8250_CONSOLE=3Dy=0A=
     CONFIG_SERIAL_8250_PCI=3Dy=0A=
     CONFIG_SERIAL_8250_NR_UARTS=3D4=0A=
     CONFIG_SERIAL_8250_RUNTIME_UARTS=3D4=0A=
     CONFIG_SERIAL_CORE=3Dy=0A=
     CONFIG_SERIAL_CORE_CONSOLE=3Dy=0A=
                </PRE>
<P>                Next, include this configuration fragment and extend =
the     =20
           <CODE class=3D"filename">FILESPATH</CODE> variable in your    =
         =20
   <CODE class=3D"filename">.bbappend</CODE> file:                 </P>
<PRE class=3D"literallayout">     FILESEXTRAPATHS_prepend :=3D =
"${THISDIR}/${PN}:"=0A=
     SRC_URI +=3D "file://8250.cfg"=0A=
                </PRE>
<P>                The next time you run BitBake to build the Linux =
kernel,=20
BitBake                detects the change in the recipe and fetches and =
applies=20
the                new configuration before building the kernel.         =
   =20
</P>
<P>                For a detailed example showing how to configure the =
kernel,  =20
             see the                "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#c=
onfiguring-the-kernel"=20
target=3D"_top">Configuring the Kernel</A>"                section in =
the Yocto=20
Project Development Manual.             </P></DIV>
<DIV title=3D'2.2.4.&nbsp;Using an "In-Tree"&nbsp;&nbsp;defconfig File' =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"using-an-in-tree-defconfig-file"></A>2.2.4.&nbsp;Using=20
an "In-Tree"&nbsp;&nbsp;<CODE class=3D"filename">defconfig</CODE> =
File<SPAN class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-in-tree-defconfig-file"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                It might be desirable to have kernel configuration =
fragment  =20
             support through a <CODE class=3D"filename">defconfig</CODE> =
file that=20
               is pulled from the kernel source tree for the configured  =
       =20
      machine.                By default, the OpenEmbedded build system =
looks=20
for                 <CODE class=3D"filename">defconfig</CODE> files in =
the layer=20
used for                Metadata, which is "out-of-tree", and then =
configures=20
them                using the following:                 </P>
<PRE class=3D"literallayout">     SRC_URI +=3D "file://defconfig"=0A=
                </PRE>
<P>                If you do not want to maintain copies of              =
  =20
<CODE class=3D"filename">defconfig</CODE> files in your layer but would  =
         =20
    rather allow users to use the default configuration from the         =
      =20
kernel tree and still be able to add configuration fragments             =
   to=20
the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>              =
  through,=20
for example, append files, you can direct the                =
OpenEmbedded build=20
system to use a                 <CODE =
class=3D"filename">defconfig</CODE> file=20
that is "in-tree".             </P>
<P>                To specify an "in-tree" <CODE=20
class=3D"filename">defconfig</CODE> file,                edit the recipe =
that=20
builds your kernel so that it has the                following command =
form:    =20
            </P>
<PRE class=3D"literallayout">     KBUILD_DEFCONFIG_KMACHINE ?=3D <EM =
class=3D"replaceable"><CODE>defconfig_file</CODE></EM>=0A=
                </PRE>
<P>                You need to append the variable with                 =
<A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KMACHINE"=20
target=3D"_top"><CODE class=3D"filename">KMACHINE</CODE></A>             =
   and then=20
supply the path to your "in-tree"                 <CODE=20
class=3D"filename">defconfig</CODE> file.             </P>
<P>                Aside from modifying your kernel recipe and providing =
your=20
own                 <CODE class=3D"filename">defconfig</CODE> file, you =
need to be=20
sure no                files or statements set <CODE=20
class=3D"filename">SRC_URI</CODE> to use a                 <CODE=20
class=3D"filename">defconfig</CODE> other than your "in-tree"            =
    file=20
(e.g. a kernel's <CODE class=3D"filename">linux-</CODE><EM=20
class=3D"replaceable"><CODE>machine</CODE></EM><CODE =
class=3D"filename">.inc</CODE> =20
              file).                In other words, if the build system =
detects=20
a statement                that identifies an "out-of-tree"              =
  =20
<CODE class=3D"filename">defconfig</CODE> file, that statement           =
     will=20
override your                 <CODE =
class=3D"filename">KBUILD_DEFCONFIG</CODE>=20
variable.             </P>
<P>                See the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KBUILD_DEFCONFIG"=20
target=3D"_top"><CODE class=3D"filename">KBUILD_DEFCONFIG</CODE></A>     =
          =20
variable description for more information.             </P></DIV></DIV>
<DIV title=3D"2.3.&nbsp;Using an Iterative Development Process" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A =
id=3D"using-an-iterative-development-process"></A>2.3.&nbsp;Using=20
an Iterative Development Process<SPAN class=3D"permalink"><A =
title=3D"Permalink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-an-iterative-development-process"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            If you do not have existing patches or configuration =
files,      =20
     you can iteratively generate them from within the BitBake build     =
      =20
environment as described within this section.            During an =
iterative=20
workflow, running a previously completed BitBake            task causes =
BitBake=20
to invalidate the tasks that follow the            completed task in the =
build=20
sequence.            Invalidated tasks rebuild the next time you run the =
build=20
using            BitBake.         </P>
<P>            As you read this section, be sure to substitute the name  =
       =20
  of your Linux kernel recipe for the term            "linux-yocto".     =
   =20
</P>
<DIV title=3D'2.3.1.&nbsp;"-dirty" String' class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"tip-dirty-string"></A>2.3.1.&nbsp;"-dirty" =
String<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ip-dirty-string"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                If kernel images are being built with "-dirty" on the =
       =20
       end of the version string, this simply means that               =20
modifications in the source directory have not been committed.           =
     =20
</P>
<PRE class=3D"literallayout">     $ git status=0A=
                </PRE>
<P></P>
<P>                You can use the above Git command to report modified, =
       =20
       removed, or added files.                You should commit those =
changes=20
to the tree regardless of                whether they will be saved, =
exported,=20
or used.                Once you commit the changes, you need to rebuild =
the=20
kernel.             </P>
<P>                To force a pickup and commit of all such pending =
changes,    =20
           enter the following:                 </P>
<PRE class=3D"literallayout">     $ git add .=0A=
     $ git commit -s -a -m "getting rid of -dirty"=0A=
                </PRE>
<P></P>
<P>                Next, rebuild the kernel.             </P></DIV>
<DIV title=3D"2.3.2.&nbsp;Generating Configuration Files" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A=20
id=3D"generating-configuration-files"></A>2.3.2.&nbsp;Generating =
Configuration=20
Files<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                You can manipulate the <CODE =
class=3D"filename">.config</CODE>=20
file                used to build a linux-yocto recipe with the          =
      =20
<CODE class=3D"filename">menuconfig</CODE> command as follows:           =
     =20
</P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c menuconfig=0A=
                </PRE>
<P>                This command starts the Linux kernel configuration =
tool,     =20
          which allows you to prepare a new                 <CODE =
class=3D"filename">.config</CODE>=20
file for the build.                When you exit the tool, be sure to =
save your=20
changes                at the prompt.             </P>
<P>                The resulting <CODE class=3D"filename">.config</CODE> =
file is  =20
             located in the build directory,                 <CODE =
class=3D"filename">${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-B"=20
target=3D"_top"><CODE class=3D"filename">B</CODE></A><CODE=20
class=3D"filename">}</CODE>,                which expands to             =
    <CODE=20
class=3D"filename">${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-WORKDIR"=20
target=3D"_top"><CODE class=3D"filename">WORKDIR</CODE></A><CODE=20
class=3D"filename">}</CODE><CODE class=3D"filename">/linux-</CODE><CODE =
class=3D"filename">${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PACKAGE_ARCH"=20
target=3D"_top"><CODE class=3D"filename">PACKAGE_ARCH</CODE></A><CODE =
class=3D"filename">}-${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_KERNEL_TYPE"=20
target=3D"_top"><CODE =
class=3D"filename">LINUX_KERNEL_TYPE</CODE></A><CODE =
class=3D"filename">}-build</CODE>.=20
               You can use the entire <CODE =
class=3D"filename">.config</CODE> file=20
as the                 <CODE class=3D"filename">defconfig</CODE> file as =
described=20
in the                "<A title=3D"2.2.3.&nbsp;Changing the =
Configuration" class=3D"link"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration">Changing=20
the Configuration</A>" section.                For more information on =
the <CODE=20
class=3D"filename">.config</CODE> file,                see the           =
     "<A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#u=
sing-menuconfig"=20
target=3D"_top">Using <CODE class=3D"filename">menuconfig</CODE></A>"    =
           =20
section in the Yocto Project Development Manual.                 </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                    You can determine what =
a variable=20
expands to by looking                    at the output of the <CODE =
class=3D"filename">bitbake=20
-e</CODE>                    command:                    =20
<PRE class=3D"literallayout">     $ bitbake -e virtual/kernel=0A=
                    </PRE>=20
                   Search the output for the variable in which you are   =
       =20
         interested to see exactly how it is expanded and used.          =
      =20
</DIV>
<P></P>
<P>                A better method is to create a configuration fragment =
using=20
the                differences between two configuration files: one =
previously  =20
             created and saved, and one freshly created using the        =
       =20
 <CODE class=3D"filename">menuconfig</CODE> tool.             </P>
<P>                To create a configuration fragment using this method, =
follow =20
              these steps:                 </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist" type=3D"1">
  <LI class=3D"listitem">
  <P>Complete a build at least through the kernel                        =

  configuration task as follows:                         </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c =
kernel_configme -f=0A=
                        </PRE>
  <P>                        This step ensures that you will be creating =
a      =20
                    <CODE class=3D"filename">.config</CODE> file from a =
known=20
  state.                        Because situations exist where your =
build state=20
  might                        become unknown, it is best to run the =
previous   =20
                      command prior to starting up                       =
  <CODE=20
  class=3D"filename">menuconfig</CODE>.                         =
</P></LI>
  <LI class=3D"listitem">
  <P>Run the <CODE class=3D"filename">menuconfig</CODE>                  =
     =20
  command:                         </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c menuconfig=0A=
                        </PRE></LI>
  <LI class=3D"listitem">
  <P>Run the <CODE class=3D"filename">diffconfig</CODE>                  =
     =20
  command to prepare a configuration fragment.                        =
The=20
  resulting file <CODE class=3D"filename">fragment.cfg</CODE>            =
         =20
    will be placed in the                         <CODE=20
  class=3D"filename">${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-WORKDIR"=20
  target=3D"_top"><CODE class=3D"filename">WORKDIR</CODE></A><CODE=20
  class=3D"filename">}</CODE> directory:                         </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c diffconfig=0A=
                        </PRE></LI></OL></DIV>
<P></P>
<P>                The <CODE class=3D"filename">diffconfig</CODE> =
command creates=20
a file that is a                list of Linux kernel <CODE=20
class=3D"filename">CONFIG_</CODE> assignments.                See the =
"<A title=3D"2.2.3.&nbsp;Changing the Configuration"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration">Changing=20
the Configuration</A>"                section for information on how to =
use the=20
output as a                configuration fragment.                 </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                    You can also use this =
method to=20
create configuration                    fragments for a BSP.             =
      =20
See the "<A title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
Descriptions</A>"                    section for more information.       =
       =20
  </DIV>
<P></P>
<P>                The kernel tools also provide configuration =
validation.      =20
         You can use these tools to produce warnings for when a          =
     =20
requested configuration does not appear in the final                 =
<CODE=20
class=3D"filename">.config</CODE> file or when you override a            =
   =20
policy configuration in a hardware configuration fragment.               =
 Here=20
is an example with some sample output of the command                that =
runs=20
these tools:                 </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c =
kernel_configcheck -f=0A=
=0A=
     ...=0A=
=0A=
     NOTE: validating kernel configuration=0A=
     This BSP sets 3 invalid/obsolete kernel options.=0A=
     These config options are not offered anywhere within this kernel.=0A=
     The full list can be found in your kernel src dir at:=0A=
     meta/cfg/standard/mybsp/invalid.cfg=0A=
=0A=
     This BSP sets 21 kernel options that are possibly non-hardware =
related.=0A=
     The full list can be found in your kernel src dir at:=0A=
     meta/cfg/standard/mybsp/specified_non_hdw.cfg=0A=
=0A=
     WARNING: There were 2 hardware options requested that do not=0A=
              have a corresponding value present in the final ".config" =
file.=0A=
              This probably means you are not getting the config you =
wanted.=0A=
              The full list can be found in your kernel src dir at:=0A=
              meta/cfg/standard/mybsp/mismatch.cfg=0A=
                </PRE>
<P></P>
<P>                The output describes the various problems that you =
can       =20
        encounter along with where to find the offending configuration   =
       =20
     items.                You can use the information in the logs to =
adjust=20
your                configuration files and then repeat the              =
  =20
<CODE class=3D"filename">kernel_configme</CODE> and                 =
<CODE class=3D"filename">kernel_configcheck</CODE>=20
commands until                they produce no warnings.             </P>
<P>                For more information on how to use the                =
 <CODE=20
class=3D"filename">menuconfig</CODE> tool, see the                "<A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#u=
sing-menuconfig"=20
target=3D"_top">Using <CODE class=3D"filename">menuconfig</CODE></A>"    =
           =20
section in the Yocto Project Development Manual.             </P></DIV>
<DIV title=3D"2.3.3.&nbsp;Modifying Source Code" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"modifying-source-code"></A>2.3.3.&nbsp;Modifying Source=20
Code<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-source-code"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                You can experiment with source code changes and =
create a     =20
          simple patch without leaving the BitBake environment.          =
     =20
To get started, be sure to complete a build at                least =
through the=20
kernel configuration task:                 </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c =
kernel_configme -f=0A=
                </PRE>
<P>                Taking this step ensures you have the sources =
prepared       =20
        and the configuration completed.                You can find the =
sources=20
in the build directory within the                 <CODE=20
class=3D"filename">source/</CODE> directory, which is a symlink          =
     =20
(i.e. <CODE class=3D"filename">${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-B"=20
target=3D"_top"><CODE class=3D"filename">B</CODE></A><CODE=20
class=3D"filename">}/source</CODE>).                The <CODE=20
class=3D"filename">source/</CODE> directory expands to                 =
<CODE=20
class=3D"filename">${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-WORKDIR"=20
target=3D"_top"><CODE class=3D"filename">WORKDIR</CODE></A><CODE=20
class=3D"filename">}</CODE><CODE class=3D"filename">/linux-</CODE><CODE =
class=3D"filename">${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PACKAGE_ARCH"=20
target=3D"_top"><CODE class=3D"filename">PACKAGE_ARCH</CODE></A><CODE =
class=3D"filename">}-${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_KERNEL_TYPE"=20
target=3D"_top"><CODE =
class=3D"filename">LINUX_KERNEL_TYPE</CODE></A><CODE =
class=3D"filename">}-build/source</CODE>.=20
               The directory pointed to by the                 <CODE =
class=3D"filename">source/</CODE>=20
symlink is also known as                 <CODE =
class=3D"filename">${</CODE><A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-STAGING_KERNEL_DIR"=20
target=3D"_top"><CODE =
class=3D"filename">STAGING_KERNEL_DIR</CODE></A><CODE =
class=3D"filename">}</CODE>.=20
            </P>
<P>                You can edit the sources as you would any other Linux =
source =20
              tree.                However, keep in mind that you will =
lose=20
changes if you                trigger the                 <A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-tasks-fetch"=20
target=3D"_top"><CODE class=3D"filename">do_fetch</CODE></A>             =
   task for=20
the recipe.                You can avoid triggering this task by not =
using=20
BitBake to                run the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-tasks-cleanall"=20
target=3D"_top"><CODE class=3D"filename">cleanall</CODE></A>,            =
     <A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-tasks-cleansstate"=20
target=3D"_top"><CODE class=3D"filename">cleansstate</CODE></A>,         =
       or=20
forced                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-tasks-fetch"=20
target=3D"_top"><CODE class=3D"filename">fetch</CODE></A>                =
commands.  =20
             Also, do not modify the recipe itself while working         =
      =20
with temporary changes or BitBake might run the                 <CODE =
class=3D"filename">fetch</CODE>=20
command depending on the                changes to the recipe.           =
  </P>
<P>                To test your temporary changes, instruct BitBake to =
run the  =20
              <CODE class=3D"filename">compile</CODE> again.             =
   The=20
<CODE class=3D"filename">-f</CODE> option forces the command to run      =
         =20
even though BitBake might think it has already done so:                 =
</P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c compile -f=0A=
                </PRE>
<P>                If the compile fails, you can update the sources and =
repeat  =20
             the <CODE class=3D"filename">compile</CODE>.                =
Once=20
compilation is successful, you can inspect and test                the =
resulting=20
build (i.e. kernel, modules, and so forth) from                the =
following=20
build directory:                 </P>
<PRE class=3D"literallayout">     =
${WORKDIR}/linux-${PACKAGE_ARCH}-${LINUX_KERNEL_TYPE}-build=0A=
                </PRE>
<P>                Alternatively, you can run the <CODE=20
class=3D"filename">deploy</CODE>                command to place the =
kernel image=20
in the                 <CODE class=3D"filename">tmp/deploy/images</CODE> =

directory:                 </P>
<PRE class=3D"literallayout">	$ bitbake linux-yocto -c deploy=0A=
                </PRE>
<P>                And, of course, you can perform the remaining =
installation=20
and                packaging steps by issuing:                 </P>
<PRE class=3D"literallayout">	$ bitbake linux-yocto=0A=
                </PRE>
<P></P>
<P>                For rapid iterative development, the =
edit-compile-repeat loop=20
               described in this section is preferable to rebuilding the =
       =20
       entire recipe because the installation and packaging tasks        =
       =20
are very time consuming.             </P>
<P>                Once you are satisfied with your source code =
modifications,  =20
             you can make them permanent by generating patches and       =
       =20
 applying them to the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>              =
  statement=20
as described in the                "<A title=3D"2.2.2.&nbsp;Applying =
Patches"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
pplying-patches">Applying=20
Patches</A>"                section.                If you are not =
familiar with=20
generating patches, refer to the                "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#c=
reating-the-patch"=20
target=3D"_top">Creating the Patch</A>"                section in the =
Yocto=20
Project Development Manual.             </P></DIV></DIV>
<DIV title=3D"2.4.&nbsp;Working With Your Own Sources" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"working-with-your-own-sources"></A>2.4.&nbsp;Working With Your Own =

Sources<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-your-own-sources"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            If you cannot work with one of the Linux kernel           =
=20
versions supported by existing linux-yocto recipes, you can            =
still=20
make use of the Yocto Project Linux kernel tooling by            working =
with=20
your own sources.            When you use your own sources, you will not =
be able=20
to            leverage the existing kernel             <A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#m=
etadata"=20
target=3D"_top">Metadata</A> and            stabilization work of the =
linux-yocto=20
sources.            However, you will be able to manage your own =
Metadata in the=20
same            format as the linux-yocto sources.            =
Maintaining format=20
compatibility facilitates converging with            linux-yocto on a =
future,=20
mutually-supported kernel version.         </P>
<P>            To help you use your own sources, the Yocto Project =
provides a   =20
        linux-yocto custom recipe            (<CODE=20
class=3D"filename">linux-yocto-custom.bb</CODE>) that uses             =
<CODE=20
class=3D"filename">kernel.org</CODE> sources            and the Yocto =
Project=20
Linux kernel tools for managing            kernel Metadata.            =
You can=20
find this recipe in the             <CODE class=3D"filename">poky</CODE> =
Git=20
repository of the            Yocto Project <A class=3D"ulink" =
href=3D"http://git.yoctoproject.org/"=20
target=3D"_top">Source Repository</A>            at:             </P>
<PRE class=3D"literallayout">     =
poky/meta-skeleton/recipes-kernel/linux/linux-yocto-custom.bb=0A=
            </PRE>
<P></P>
<P>            Here are some basic steps you can use to work with your =
own=20
sources:             </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist" type=3D"1">
  <LI class=3D"listitem">
  <P>Copy the <CODE class=3D"filename">linux-yocto-custom.bb</CODE>      =
         =20
      recipe to your layer and give it a meaningful name.                =
    The=20
  name should include the version of the Linux kernel you                =
    are=20
  using (e.g.                     <CODE=20
  class=3D"filename">linux-yocto-myproject_3.19.bb</CODE>,               =
    =20
  where "3.19" is the base version of the Linux kernel                   =
 with=20
  which you would be working).</P></LI>
  <LI class=3D"listitem">
  <P>In the same directory inside your layer,                    create =
a=20
  matching directory                    to store your patches and =
configuration=20
  files (e.g.                     <CODE=20
  class=3D"filename">linux-yocto-myproject</CODE>).                     =
</P></LI>
  <LI class=3D"listitem">
  <P>Make sure you have either a                     <CODE=20
  class=3D"filename">defconfig</CODE> file or configuration              =
     =20
  fragment files.                    When you use the <CODE=20
  class=3D"filename">linux-yocto-custom.bb</CODE>                    =
recipe, you=20
  must specify a configuration.                    If you do not have a =
<CODE=20
  class=3D"filename">defconfig</CODE> file,                    you can =
run the=20
  following:                     </P>
<PRE class=3D"literallayout">     $ make defconfig=0A=
                    </PRE>
  <P>                    After running the command, copy the resulting   =
       =20
            <CODE class=3D"filename">.config</CODE> to the               =
     =20
  <CODE class=3D"filename">files</CODE> directory as "defconfig" and     =
         =20
       then add it to the                     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
  target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>            =
       =20
  variable in the recipe.</P>
  <P>Running the <CODE class=3D"filename">make defconfig</CODE>          =
         =20
  command results in the default configuration for your                  =
 =20
  architecture as defined by your kernel.                    However, no =

  guarantee exists that this configuration is                    valid =
for your=20
  use case, or that your board will even boot.                    This =
is=20
  particularly true for non-x86 architectures.                    To use =
non-x86=20
  <CODE class=3D"filename">defconfig</CODE> files, you                   =
 need to=20
  be more specific and find one that matches your                    =
board (i.e.=20
  for arm, you look in                     <CODE=20
  class=3D"filename">arch/arm/configs</CODE> and use the one that        =
         =20
    is the best starting point for your board).                     =
</P></LI>
  <LI class=3D"listitem">
  <P>Edit the following variables in your recipe                    as=20
  appropriate for your project:                     </P>
  <DIV class=3D"itemizedlist">
  <UL class=3D"itemizedlist" type=3D"disc">
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
    target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>:         =
           =20
           The <CODE class=3D"filename">SRC_URI</CODE> should specify    =
         =20
                  a Git repository that uses one of the supported Git    =
       =20
                    fetcher protocols (i.e. <CODE =
class=3D"filename">file</CODE>, =20
                               <CODE class=3D"filename">git</CODE>, =
<CODE class=3D"filename">http</CODE>,=20
                               and so forth).                            =
The=20
    <CODE class=3D"filename">SRC_URI</CODE> variable should              =
         =20
        also specify either a <CODE class=3D"filename">defconfig</CODE>  =
         =20
                    file or some configuration fragment files.           =
       =20
             The skeleton recipe provides an example                     =
       =20
    <CODE class=3D"filename">SRC_URI</CODE> as a syntax reference.       =
         =20
                </P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_VERSION"=20
    target=3D"_top"><CODE class=3D"filename">LINUX_VERSION</CODE></A>:   =
           =20
                 The Linux kernel version you are using (e.g.            =
       =20
            "3.19").</P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_VERSION_EXTENSION"=20
    target=3D"_top"><CODE =
class=3D"filename">LINUX_VERSION_EXTENSION</CODE></A>:    =20
                           The Linux kernel <CODE=20
    class=3D"filename">CONFIG_LOCALVERSION</CODE>                        =
    that=20
    is compiled into the resulting kernel and visible                    =
       =20
    through the <CODE class=3D"filename">uname</CODE> command.           =
         =20
            </P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRCREV"=20
    target=3D"_top"><CODE class=3D"filename">SRCREV</CODE></A>:          =
           =20
          The commit ID from which you want to build.                    =
       =20
     </P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PR"=20
    target=3D"_top"><CODE class=3D"filename">PR</CODE></A>:              =
           =20
      Treat this variable the same as you would in any other             =
       =20
           recipe.                            Increment the variable to =
indicate=20
    to the OpenEmbedded                            build system that the =
recipe=20
    has changed.                             </P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PV"=20
    target=3D"_top"><CODE class=3D"filename">PV</CODE></A>:              =
           =20
      The default <CODE class=3D"filename">PV</CODE> assignment is       =
         =20
               typically adequate.                            It =
combines the=20
    <CODE class=3D"filename">LINUX_VERSION</CODE>                        =
    with=20
    the Source Control Manager (SCM) revision                            =
as=20
    derived from the                             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRCPV"=20
    target=3D"_top"><CODE class=3D"filename">SRCPV</CODE></A>            =
           =20
        variable.                            The combined results are a =
string=20
    with                            the following form:                  =
       =20
       </P>
<PRE class=3D"literallayout">     =
3.19.11+git1+68a635bf8dfb64b02263c1ac80c948647cc76d5f_1+218bd8d2022b9852c=
60d32f0d770931e3cf343e2=0A=
                            </PRE>
    <P>                            While lengthy, the extra verbosity in =
<CODE=20
    class=3D"filename">PV</CODE>                            helps ensure =
you are=20
    using the exact                            sources from which you =
intend to=20
    build.                             </P></LI>
    <LI class=3D"listitem">
    <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-COMPATIBLE_MACHINE"=20
    target=3D"_top"><CODE =
class=3D"filename">COMPATIBLE_MACHINE</CODE></A>:         =20
                      A list of the machines supported by your new =
recipe.      =20
                         This variable in the example recipe is set      =
       =20
                  by default to a regular expression that matches        =
       =20
                only the empty string, "(^$)".                           =
 This=20
    default setting triggers an explicit build                           =
=20
    failure.                            You must change it to match a =
list of=20
    the machines                            that your new recipe =
supports.      =20
                         For example, to support the <CODE=20
    class=3D"filename">qemux86</CODE>                            and =
<CODE class=3D"filename">qemux86-64</CODE>=20
    machines, use                            the following form:         =
       =20
                </P>
<PRE class=3D"literallayout">     COMPATIBLE_MACHINE =3D =
"qemux86|qemux86-64"=0A=
                            </PRE></LI></UL></DIV></LI>
  <LI class=3D"listitem">
  <P>Provide further customizations to your recipe                    as =
needed=20
  just as you would customize an existing                    linux-yocto =
recipe.=20
                     See the "<A title=3D"2.2.&nbsp;Modifying an =
Existing Recipe"=20
  class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe">Modifying=20
                     an Existing Recipe</A>" section for information.    =
       =20
           </P></LI></OL></DIV>
<P></P></DIV>
<DIV title=3D"2.5.&nbsp;Working with Out-of-Tree Modules" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"working-with-out-of-tree-modules"></A>2.5.&nbsp;Working with =
Out-of-Tree=20
Modules<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-out-of-tree-modules"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            This section describes steps to build out-of-tree modules =
on     =20
      your target and describes how to incorporate out-of-tree modules   =
       =20
 in the build.         </P>
<DIV title=3D"2.5.1.&nbsp;Building Out-of-Tree Modules on the Target" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A=20
id=3D"building-out-of-tree-modules-on-the-target"></A>2.5.1.&nbsp;Buildin=
g=20
Out-of-Tree Modules on the Target<SPAN class=3D"permalink"><A =
title=3D"Permalink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uilding-out-of-tree-modules-on-the-target"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                While the traditional Yocto Project development model =
would=20
be                to include kernel modules as part of the normal build  =
       =20
      process, you might find it useful to build modules on the          =
     =20
target.                This could be the case if your target system is =
capable  =20
             and powerful enough to handle the necessary compilation.    =
       =20
    Before deciding to build on your target, however, you should         =
      =20
consider the benefits of using a proper cross-development                =

environment from your build host.             </P>
<P>                If you want to be able to build out-of-tree modules =
on       =20
        the target, there are some steps you need to take                =
on the=20
target that is running your SDK image.                Briefly, the <CODE =
class=3D"filename">kernel-dev</CODE>=20
package                is installed by default on all                 =
<CODE=20
class=3D"filename">*.sdk</CODE> images and the                 <CODE =
class=3D"filename">kernel-devsrc</CODE>=20
package is installed                on many of the <CODE=20
class=3D"filename">*.sdk</CODE> images.                However, you need =
to create=20
some scripts prior to                attempting to build the out-of-tree =
modules=20
on the target                that is running that image.             =
</P>
<P>                Prior to attempting to build the out-of-tree modules, =
       =20
       you need to be on the target as root and you need to              =
 =20
change to the <CODE class=3D"filename">/usr/src/kernel</CODE> directory. =
         =20
     Next, <CODE class=3D"filename">make</CODE> the scripts:             =
    </P>
<PRE class=3D"literallayout">     # cd /usr/src/kernel=0A=
     # make scripts=0A=
                </PRE>
<P>                Because all SDK image recipes include                 =
<CODE=20
class=3D"filename">dev-pkgs</CODE>, the                 <CODE=20
class=3D"filename">kernel-dev</CODE> packages will be installed          =
      as=20
part of the SDK image and the                 <CODE=20
class=3D"filename">kernel-devsrc</CODE> packages will be installed       =
        =20
as part of applicable SDK images.                The SDK uses the =
scripts when=20
building out-of-tree                modules.                Once you =
have=20
switched to that directory and created the                scripts, you =
should be=20
able to build your out-of-tree modules                on the target.     =
       =20
</P></DIV>
<DIV title=3D"2.5.2.&nbsp;Incorporating Out-of-Tree Modules" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A=20
id=3D"incorporating-out-of-tree-modules"></A>2.5.2.&nbsp;Incorporating =
Out-of-Tree=20
Modules<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
ncorporating-out-of-tree-modules"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                While it is always preferable to work with sources =
integrated=20
               into the Linux kernel sources, if you need an external =
kernel    =20
           module, the <CODE class=3D"filename">hello-mod.bb</CODE> =
recipe is     =20
          available as a template from which you can create your         =
      =20
own out-of-tree Linux kernel module recipe.             </P>
<P>                This template recipe is located in the                =
 <CODE=20
class=3D"filename">poky</CODE> Git repository of the                =
Yocto Project=20
<A class=3D"ulink" href=3D"http://git.yoctoproject.org/" =
target=3D"_top">Source=20
Repository</A>                at:                 </P>
<PRE class=3D"literallayout">     =
poky/meta-skeleton/recipes-kernel/hello-mod/hello-mod_0.1.bb=0A=
                </PRE>
<P></P>
<P>                To get started, copy this recipe to your layer and =
give it a =20
              meaningful name (e.g. <CODE=20
class=3D"filename">mymodule_1.0.bb</CODE>).                In the same =
directory,=20
create a new directory named                 <CODE =
class=3D"filename">files</CODE>=20
where you can store any source files,                patches, or other =
files=20
necessary for building                the module that do not come with =
the=20
sources.                Finally, update the recipe as needed for the =
module.    =20
           Typically, you will need to set the following variables:      =
       =20
   </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-DESCRIPTION"=20
  target=3D"_top"><CODE class=3D"filename">DESCRIPTION</CODE></A>        =
           =20
       </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LICENSE"=20
  target=3D"_top"><CODE class=3D"filename">LICENSE*</CODE></A>           =
           =20
    </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
  target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>            =
           =20
   </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PV"=20
  target=3D"_top"><CODE class=3D"filename">PV</CODE></A>                 =
       =20
  </P></LI></UL></DIV>
<P></P>
<P>                Depending on the build system used by the module =
sources,    =20
           you might need to make some adjustments.                For =
example,=20
a typical module <CODE class=3D"filename">Makefile</CODE>                =
looks=20
much like the one provided with the                 <CODE=20
class=3D"filename">hello-mod</CODE> template:                 </P>
<PRE class=3D"literallayout">     obj-m :=3D hello.o=0A=
=0A=
     SRC :=3D $(shell pwd)=0A=
=0A=
     all:=0A=
         $(MAKE) -C $(KERNEL_SRC) M=3D$(SRC)=0A=
=0A=
     modules_install:=0A=
         $(MAKE) -C $(KERNEL_SRC) M=3D$(SRC) modules_install=0A=
     ...=0A=
                </PRE>
<P></P>
<P>                The important point to note here is the               =
  <A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KERNEL_SRC"=20
target=3D"_top"><CODE class=3D"filename">KERNEL_SRC</CODE></A>           =
    =20
variable.                The                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-classes-module"=20
target=3D"_top"><CODE class=3D"filename">module</CODE></A>               =
 class sets=20
this variable and the                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KERNEL_PATH"=20
target=3D"_top"><CODE class=3D"filename">KERNEL_PATH</CODE></A>          =
     =20
variable to                 <CODE class=3D"filename">${<A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-STAGING_KERNEL_DIR"=20
target=3D"_top"><CODE =
class=3D"filename">STAGING_KERNEL_DIR</CODE></A>}</CODE>      =20
         with the necessary Linux kernel build information to build      =
       =20
  modules.                If your module <CODE =
class=3D"filename">Makefile</CODE>=20
uses a different                variable, you might want to override the =
       =20
        <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#r=
ef-tasks-compile"=20
target=3D"_top"><CODE class=3D"filename">do_compile()</CODE></A>         =
      =20
step, or create a patch to                the <CODE=20
class=3D"filename">Makefile</CODE> to work with the more typical         =
       =20
<CODE class=3D"filename">KERNEL_SRC</CODE> or                 <CODE =
class=3D"filename">KERNEL_PATH</CODE>=20
variables.             </P>
<P>                After you have prepared your recipe, you will likely =
want to =20
              include the module in your images.                To do =
this, see=20
the documentation for the following variables in                the =
Yocto=20
Project Reference Manual and set one of them                =
appropriately for=20
your machine configuration file:                 </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_ESSENTIAL_EXTRA_RDEPENDS"=20
  target=3D"_top"><CODE=20
  class=3D"filename">MACHINE_ESSENTIAL_EXTRA_RDEPENDS</CODE></A>         =
         =20
        </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS"=20
  target=3D"_top"><CODE=20
  class=3D"filename">MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS</CODE></A>      =
         =20
           </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_EXTRA_RDEPENDS"=20
  target=3D"_top"><CODE =
class=3D"filename">MACHINE_EXTRA_RDEPENDS</CODE></A>        =20
                  </P></LI>
  <LI class=3D"listitem">
  <P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_EXTRA_RRECOMMENDS"=20
  target=3D"_top"><CODE =
class=3D"filename">MACHINE_EXTRA_RRECOMMENDS</CODE></A>     =20
                     </P></LI></UL></DIV>
<P></P>
<P>                Modules are often not required for boot and can be =
excluded=20
from                certain build configurations.                The =
following=20
allows for the most flexibility:                 </P>
<PRE class=3D"literallayout">     MACHINE_EXTRA_RRECOMMENDS +=3D =
"kernel-module-mymodule"=0A=
                </PRE>
<P>                The value is derived by appending the module filename =
without=20
               the <CODE class=3D"filename">.ko</CODE> extension to the =
string    =20
           "kernel-module-".             </P>
<P>                Because the variable is                 <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-RRECOMMENDS"=20
target=3D"_top"><CODE class=3D"filename">RRECOMMENDS</CODE></A>          =
      and=20
not a                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-RDEPENDS"=20
target=3D"_top"><CODE class=3D"filename">RDEPENDS</CODE></A>             =
  =20
variable, the build will not fail if this module is not                =
available=20
to include in the image.             </P></DIV></DIV>
<DIV title=3D"2.6.&nbsp;Inspecting Changes and Commits" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"inspecting-changes-and-commits"></A>2.6.&nbsp;Inspecting Changes =
and=20
Commits<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
nspecting-changes-and-commits"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            A common question when working with a kernel is:          =
  "What=20
changes have been applied to this tree?"            Rather than using =
"grep"=20
across directories to see what has            changed, you can use Git =
to=20
inspect or search the kernel tree.            Using Git is an efficient =
way to=20
see what has changed in the tree.         </P>
<DIV title=3D"2.6.1.&nbsp;What Changed in a Kernel?" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"what-changed-in-a-kernel"></A>2.6.1.&nbsp;What Changed=20
in a Kernel?<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
hat-changed-in-a-kernel"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                Following are a few examples that show how to use Git =
       =20
       commands to examine changes.                These examples are by =
no=20
means the only way to see changes.                 </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                    In the following =
examples, unless=20
you provide a commit                    range, <CODE=20
class=3D"filename">kernel.org</CODE> history is blended                  =
  with=20
Yocto Project kernel changes.                    You can form ranges by =
using=20
branch names from the                    kernel tree as the upper and =
lower=20
commit markers with                    the Git commands.                 =
   You=20
can see the branch names through the web interface                    to =
the=20
Yocto Project source repositories at                     <A =
class=3D"ulink" href=3D"http://git.yoctoproject.org/cgit.cgi"=20
target=3D"_top">http://git.yoctoproject.org/cgit.cgi</A>.                =
 </DIV>
<P>                To see a full range of the changes, use the           =
     =20
<CODE class=3D"filename">git whatchanged</CODE> command and specify a    =
         =20
  commit range for the branch                (<EM=20
class=3D"replaceable"><CODE>commit</CODE></EM><CODE =
class=3D"filename">..</CODE><EM=20
class=3D"replaceable"><CODE>commit</CODE></EM>).             </P>
<P>                Here is an example that looks at what has changed in =
the     =20
           <CODE class=3D"filename">emenlow</CODE> branch of the         =
       =20
<CODE class=3D"filename">linux-yocto-3.19</CODE> kernel.                =
The lower=20
commit range is the commit associated with the                 <CODE =
class=3D"filename">standard/base</CODE>=20
branch, while                the upper commit range is the commit =
associated=20
with the                 <CODE =
class=3D"filename">standard/emenlow</CODE> branch. =20
               </P>
<PRE class=3D"literallayout">     $ git whatchanged =
origin/standard/base..origin/standard/emenlow=0A=
                </PRE>
<P></P>
<P>                To see short, one line summaries of changes use the   =
       =20
      <CODE class=3D"filename">git log</CODE> command:                 =
</P>
<PRE class=3D"literallayout">     $ git log --oneline =
origin/standard/base..origin/standard/emenlow=0A=
                </PRE>
<P></P>
<P>                Use this command to see code differences for the =
changes:    =20
            </P>
<PRE class=3D"literallayout">     $ git diff =
origin/standard/base..origin/standard/emenlow=0A=
                </PRE>
<P></P>
<P>                Use this command to see the commit log messages and =
the      =20
         text differences:                 </P>
<PRE class=3D"literallayout">     $ git show =
origin/standard/base..origin/standard/emenlow=0A=
                </PRE>
<P></P>
<P>                Use this command to create individual patches for     =
       =20
   each change.                Here is an example that that creates =
patch files=20
for each                commit and places them in your <CODE=20
class=3D"filename">Documents</CODE>                directory:            =
     </P>
<PRE class=3D"literallayout">     $ git format-patch -o $HOME/Documents =
origin/standard/base..origin/standard/emenlow=0A=
                </PRE>
<P></P></DIV>
<DIV title=3D"2.6.2.&nbsp;Showing a Particular Feature or Branch Change" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A=20
id=3D"showing-a-particular-feature-or-branch-change"></A>2.6.2.&nbsp;Show=
ing a=20
Particular Feature or Branch Change<SPAN class=3D"permalink"><A =
title=3D"Permalink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
howing-a-particular-feature-or-branch-change"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                Tags in the Yocto Project kernel tree divide changes =
for     =20
          significant features or branches.                The <CODE =
class=3D"filename">git=20
show</CODE>&nbsp;<EM class=3D"replaceable"><CODE>tag</CODE></EM>         =
      =20
command shows changes based on a tag.                Here is an example =
that=20
shows <CODE class=3D"filename">systemtap</CODE>                changes:  =
         =20
     </P>
<PRE class=3D"literallayout">     $ git show systemtap=0A=
                </PRE>
<P>                You can use the                 <CODE =
class=3D"filename">git=20
branch --contains</CODE>&nbsp;<EM =
class=3D"replaceable"><CODE>tag</CODE></EM>     =20
          command to show the branches that contain a particular =
feature.       =20
        This command shows the branches that contain the                 =
<CODE=20
class=3D"filename">systemtap</CODE> feature:                 </P>
<PRE class=3D"literallayout">     $ git branch --contains systemtap=0A=
                </PRE>
<P></P></DIV></DIV>
<DIV title=3D"2.7.&nbsp;Adding Recipe-Space Kernel Features" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A =
id=3D"adding-recipe-space-kernel-features"></A>2.7.&nbsp;Adding=20
Recipe-Space Kernel Features<SPAN class=3D"permalink"><A =
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
dding-recipe-space-kernel-features"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            You can add kernel features in the             <A =
title=3D"3.3.1.&nbsp;Recipe-Space Metadata"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#r=
ecipe-space-metadata">recipe-space</A>=20
by            using the             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KERNEL_FEATURES"=20
target=3D"_top"><CODE class=3D"filename">KERNEL_FEATURES</CODE></A>      =
     =20
variable and by specifying the feature's <CODE =
class=3D"filename">.scc</CODE>     =20
      file path in the             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>            =
statement.   =20
        When you add features using this method, the OpenEmbedded build  =
       =20
  system checks to be sure the features are present.            If the =
features=20
are not present, the build stops.            Kernel features are the =
last=20
elements processed for configuring            and patching the kernel.   =
       =20
 Therefore, adding features in this manner is a way            to =
enforce=20
specific features are present and enabled            without needing to =
do a=20
full audit of any other layer's additions            to the <CODE =
class=3D"filename">SRC_URI</CODE>=20
statement.         </P>
<P>            You add a kernel feature by providing the feature as part =
of the =20
           <CODE class=3D"filename">KERNEL_FEATURES</CODE> variable and =
by=20
providing the            path to the feature's <CODE=20
class=3D"filename">.scc</CODE> file, which is            relative to the =
root of=20
the kernel Metadata.            The OpenEmbedded build system searches =
all forms=20
of kernel            Metadata on the <CODE =
class=3D"filename">SRC_URI</CODE>=20
statement regardless            of whether the Metadata is in the=20
"kernel-cache", system kernel            Metadata, or a recipe-space =
Metadata.  =20
         See the            "<A title=3D"3.3.&nbsp;Kernel Metadata =
Location"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-location">Kernel=20
Metadata Location</A>"            section for additional information.    =
    =20
</P>
<P>            When you specify the feature's <CODE =
class=3D"filename">.scc</CODE>=20
file            on the <CODE class=3D"filename">SRC_URI</CODE> =
statement, the=20
OpenEmbedded            build system adds the directory of that          =
  =20
<CODE class=3D"filename">.scc</CODE> file along with all its =
subdirectories       =20
    to the kernel feature search path.            Because subdirectories =
are=20
searched, you can reference a single             <CODE=20
class=3D"filename">.scc</CODE> file in the             <CODE=20
class=3D"filename">SRC_URI</CODE> statement to reference multiple kernel =
         =20
 features.         </P>
<P>            Consider the following example that adds the "test.scc" =
feature  =20
         to the build.             </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist" type=3D"1">
  <LI class=3D"listitem">
  <P>                    Create a <CODE class=3D"filename">.scc</CODE> =
file and=20
  locate it                    just as you would any other patch file,   =
       =20
            <CODE class=3D"filename">.cfg</CODE> file, or fetcher item   =
         =20
         you specify in the <CODE class=3D"filename">SRC_URI</CODE>      =
         =20
      statement.                     </P>
  <DIV title=3D"Notes" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
  <H3 class=3D"title">Notes</H3>
  <DIV class=3D"itemizedlist">
  <UL class=3D"itemizedlist" type=3D"disc">
    <LI class=3D"listitem">
    <P>                                You must add the directory of the =
       =20
                            <CODE class=3D"filename">.scc</CODE> file to =
the=20
    fetcher's                                search path in the same =
manner as=20
    you would                                add a <CODE=20
    class=3D"filename">.patch</CODE> file.                               =
 =20
    </P></LI>
    <LI class=3D"listitem">
    <P>                                You can create additional         =
       =20
                    <CODE class=3D"filename">.scc</CODE> files beneath =
the        =20
                           directory that contains the file you are      =
       =20
                      adding.                                All =
subdirectories=20
    are searched during the                                build as =
potential=20
    feature directories.                                =20
</P></LI></UL></DIV></DIV>
  <P>                    Continuing with the example, suppose the =
"test.scc"    =20
                 feature you are adding has a                     <CODE =
class=3D"filename">test.scc</CODE>=20
  file in the following                    directory:                    =
 </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>my_recipe</CODE></EM>=0A=
        |=0A=
        +-linux-yocto=0A=
           |=0A=
           +-test.cfg=0A=
           +-test.scc=0A=
                    </PRE>
  <P>                    In this example, the <CODE=20
  class=3D"filename">linux-yocto</CODE>                    directory has =
both the=20
  feature                     <CODE class=3D"filename">test.scc</CODE> =
file and a=20
  similarly                    named configuration fragment file         =
       =20
      <CODE class=3D"filename">test.cfg</CODE>.                     =
</P></LI>
  <LI class=3D"listitem">
  <P>                    Add the <CODE class=3D"filename">.scc</CODE> =
file to the =20
                    recipe's <CODE class=3D"filename">SRC_URI</CODE> =
statement:   =20
                   </P>
<PRE class=3D"literallayout">     SRC_URI_append =3D " file://test.scc"=0A=
                    </PRE>
  <P>                    The leading space before the path is important =
as the  =20
                   path is appended to the existing path.                =
    =20
  </P></LI>
  <LI class=3D"listitem">
  <P>                    Specify the feature as a kernel feature:        =
       =20
       </P>
<PRE class=3D"literallayout">     KERNEL_FEATURES_append =3D " test.scc"=0A=
                    </PRE>
  <P>                    The OpenEmbedded build system processes the =
kernel=20
  feature                    when it builds the kernel.                  =
   </P>
  <DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
  <H3 class=3D"title">Note</H3>                        If other features =
are=20
  contained below "test.scc",                        then their =
directories are=20
  relative to the directory                        containing the <CODE =
class=3D"filename">test.scc</CODE>=20
  file.                     </DIV>
  <P></P></LI></OL></DIV>
<P></P></DIV></DIV>
<DIV title=3D"Chapter&nbsp;3.&nbsp;Working with Advanced Metadata"=20
class=3D"chapter">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A =
id=3D"kernel-dev-advanced"></A>Chapter&nbsp;3.&nbsp;Working=20
with Advanced Metadata<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-advanced"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-advanced-overview">3.1.=20
  Overview</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-kernel-metadata-in-a-recipe">3.2.=20
  Using Kernel Metadata in a Recipe</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-location">3.3.=20
  Kernel Metadata Location</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#r=
ecipe-space-metadata">3.3.1.=20
    Recipe-Space Metadata</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
etadata-outside-the-recipe-space">3.3.2.=20
    Metadata Outside the Recipe-Space</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-syntax">3.4.=20
  Kernel Metadata Syntax</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
onfiguration">3.4.1.=20
    Configuration</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#p=
atches">3.4.2.=20
    Patches</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eatures">3.4.3.=20
    Features</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types">3.4.4.=20
    Kernel Types</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">3.4.5.=20
    BSP Descriptions</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#o=
rganizing-your-source">3.5.=20
  Organizing Your Source</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#e=
ncapsulating-patches">3.5.1.=20
    Encapsulating Patches</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
achine-branches">3.5.2.=20
    Machine Branches</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eature-branches">3.5.3.=20
    Feature Branches</A></SPAN></DT></DL></DD>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
cc-reference">3.6.=20
  SCC Description File Reference</A></SPAN></DT></DL></DIV>
<DIV title=3D"3.1.&nbsp;Overview" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-dev-advanced-overview"></A>3.1.&nbsp;Overview<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-advanced-overview"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        In addition to supporting configuration fragments and =
patches, the   =20
    Yocto Project kernel tools also support rich         <A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#m=
etadata"=20
target=3D"_top">Metadata</A> that you can        use to define complex =
policies=20
and Board Support Package (BSP) support.        The purpose of the =
Metadata and=20
the tools that manage it, known as        the kern-tools (<CODE=20
class=3D"filename">kern-tools-native_git.bb</CODE>), is        to help =
you manage=20
the complexity of the configuration and sources        used to support =
multiple=20
BSPs and Linux kernel types.     </P></DIV>
<DIV title=3D"3.2.&nbsp;Using Kernel Metadata in a Recipe" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"using-kernel-metadata-in-a-recipe"></A>3.2.&nbsp;Using Kernel =
Metadata in a=20
Recipe<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-kernel-metadata-in-a-recipe"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        The kernel sources in the Yocto Project contain kernel =
Metadata,=20
which        is located in the <CODE class=3D"filename">meta</CODE> =
branches of=20
the kernel        source Git repositories.        This Metadata defines =
Board=20
Support Packages (BSPs) that        correspond to definitions in =
linux-yocto=20
recipes for the same BSPs.        A BSP consists of an aggregation of =
kernel=20
policy and enabled        hardware-specific features.        The BSP can =
be=20
influenced from within the linux-yocto recipe.         </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>            Linux kernel source that =
contains kernel=20
Metadata is said to be            "linux-yocto style" kernel source.     =
      =20
A Linux kernel recipe that inherits from the             <CODE=20
class=3D"filename">linux-yocto.inc</CODE> include file is said to be a   =
        =20
"linux-yocto style" recipe.         </DIV>
<P></P>
<P>        Every linux-yocto style recipe must define the         <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KMACHINE"=20
target=3D"_top"><CODE class=3D"filename">KMACHINE</CODE></A>        =
variable.       =20
This variable is typically set to the same value as the         <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE"=20
target=3D"_top"><CODE class=3D"filename">MACHINE</CODE></A>        =
variable, which=20
is used by         <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#b=
itbake-term"=20
target=3D"_top">BitBake</A>.        However, in some cases, the variable =
might=20
instead refer to the        underlying platform of the <CODE=20
class=3D"filename">MACHINE</CODE>.     </P>
<P>        Multiple BSPs can reuse the same <CODE=20
class=3D"filename">KMACHINE</CODE>        name if they are built using =
the same=20
BSP description.        The "ep108-zynqmp" and "qemuzynqmp" BSP =
combination     =20
  in the <CODE class=3D"filename">meta-xilinx</CODE>        layer is a =
good=20
example of two BSPs using the same         <CODE=20
class=3D"filename">KMACHINE</CODE> value (i.e. "zynqmp").        See the =
<A title=3D"3.4.5.&nbsp;BSP Descriptions"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
Descriptions</A> section        for more information.     </P>
<P>        Every linux-yocto style recipe must also indicate the Linux =
kernel   =20
    source repository branch used to build the Linux kernel.        The =
<A=20
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KBRANCH"=20
target=3D"_top"><CODE class=3D"filename">KBRANCH</CODE></A>        =
variable must be=20
set to indicate the branch.         </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>            You can use the <CODE=20
class=3D"filename">KBRANCH</CODE> value to define an            =
alternate branch=20
typically with a machine override as shown here            from the =
<CODE class=3D"filename">meta-emenlow</CODE>=20
layer:            =20
<PRE class=3D"literallayout">     KBRANCH_emenlow-noemgd =3D =
"standard/base"=0A=
            </PRE></DIV>
<P></P>
<P>        The linux-yocto style recipes can optionally define the =
following    =20
   variables:         </P>
<PRE class=3D"literallayout">     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KERNEL_FEATURES" target=3D"_top">KERNEL_FEATURES</A>=0A=
     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_KERNEL_TYPE" target=3D"_top">LINUX_KERNEL_TYPE</A>=0A=
        </PRE>
<P></P>
<P><CODE class=3D"filename">LINUX_KERNEL_TYPE</CODE> defines the kernel =
type to be=20
       used in assembling the configuration.        If you do not =
specify a=20
<CODE class=3D"filename">LINUX_KERNEL_TYPE</CODE>,        it defaults to =

"standard".        Together with         <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KMACHINE"=20
target=3D"_top"><CODE class=3D"filename">KMACHINE</CODE></A>,         =
<CODE class=3D"filename">LINUX_KERNEL_TYPE</CODE>=20
defines the search        arguments used by the kernel tools to find the =
      =20
appropriate description within the kernel Metadata with which to        =
build=20
out the sources and configuration.        The linux-yocto recipes define =

"standard", "tiny", and "preempt-rt"        kernel types.        See the =
"<A=20
title=3D"3.4.4.&nbsp;Kernel Types" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types">Kernel=20
Types</A>" section        for more information on kernel types.     </P>
<P>        During the build, the kern-tools search for the BSP =
description      =20
 file that most closely matches the <CODE =
class=3D"filename">KMACHINE</CODE>      =20
 and <CODE class=3D"filename">LINUX_KERNEL_TYPE</CODE> variables passed =
in from=20
the        recipe.        The tools use the first BSP description it =
finds that=20
match        both variables.        If the tools cannot find a match, =
they issue=20
a warning such as        the following:         </P>
<PRE class=3D"literallayout">     WARNING: Can't find any BSP hardware =
or required configuration fragments.=0A=
     WARNING: Looked at meta/cfg/broken/emenlow-broken/hdw_frags.txt and=0A=
              meta/cfg/broken/emenlow-broken/required_frags.txt in =
directory:=0A=
              meta/cfg/broken/emenlow-broken=0A=
        </PRE>
<P>        In this example, <CODE class=3D"filename">KMACHINE</CODE> was =
set to=20
"emenlow-broken"        and <CODE =
class=3D"filename">LINUX_KERNEL_TYPE</CODE> was=20
set to "broken".     </P>
<P>        The tools first search for the <CODE =
class=3D"filename">KMACHINE</CODE>=20
and        then for the <CODE =
class=3D"filename">LINUX_KERNEL_TYPE</CODE>.       =20
If the tools cannot find a partial match, they will use the        =
sources from=20
the <CODE class=3D"filename">KBRANCH</CODE> and any configuration        =
specified=20
in the         <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>.     </P>
<P>        You can use the <CODE =
class=3D"filename">KERNEL_FEATURES</CODE>=20
variable        to include features (configuration fragments, patches, =
or both)=20
that        are not already included by the <CODE=20
class=3D"filename">KMACHINE</CODE> and         <CODE=20
class=3D"filename">LINUX_KERNEL_TYPE</CODE> variable combination.        =
For=20
example, to include a feature specified as       =20
"features/netfilter/netfilter.scc",        specify:         </P>
<PRE class=3D"literallayout">     KERNEL_FEATURES +=3D =
"features/netfilter/netfilter.scc"=0A=
        </PRE>
<P>        To include a feature called "cfg/sound.scc" just for the      =
  =20
<CODE class=3D"filename">qemux86</CODE> machine, specify:         </P>
<PRE class=3D"literallayout">     KERNEL_FEATURES_append_qemux86 =3D " =
cfg/sound.scc"=0A=
        </PRE>
<P>        The value of the entries in <CODE=20
class=3D"filename">KERNEL_FEATURES</CODE>        are dependent on their =
location=20
within the kernel Metadata itself.        The examples here are taken =
from the=20
<CODE class=3D"filename">meta</CODE>        branch of the <CODE=20
class=3D"filename">linux-yocto-3.19</CODE> repository.        Within =
that branch,=20
"features" and "cfg" are subdirectories of the         <CODE=20
class=3D"filename">meta/cfg/kernel-cache</CODE> directory.        For =
more=20
information, see the        "<A title=3D"3.4.&nbsp;Kernel Metadata =
Syntax" class=3D"link"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-syntax">Kernel=20
Metadata Syntax</A>" section.         </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>            The processing of the these =
variables has=20
evolved some between the	        0.9 and 1.3 releases of the Yocto =
Project and=20
associated	        kern-tools sources.            The descriptions in =
this=20
section are accurate for 1.3 and later	        releases of the Yocto =
Project.   =20
     </DIV>
<P></P></DIV>
<DIV title=3D"3.3.&nbsp;Kernel Metadata Location" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-metadata-location"></A>3.3.&nbsp;Kernel Metadata =
Location<SPAN class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-location"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        Kernel Metadata always exists outside of the kernel tree =
either      =20
 defined in a kernel recipe (recipe-space) or outside of the recipe.     =
  =20
Where you choose to define the Metadata depends on what you want        =
to do=20
and how you intend to work.        Regardless of where you define the =
kernel=20
Metadata, the syntax used        applies equally.     </P>
<P>        If you are unfamiliar with the Linux kernel and only wish     =
   to=20
apply a configuration and possibly a couple of patches provided to       =
 you by=20
others, the recipe-space method is recommended.        This method is =
also a=20
good approach if you are working with Linux kernel        sources you do =
not=20
control or if you just do not want to maintain a        Linux kernel Git =

repository on your own.        For partial information on how you can =
define=20
kernel Metadata in        the recipe-space, see the        "<A =
title=3D"2.2.&nbsp;Modifying an Existing Recipe"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe">Modifying=20
an Existing Recipe</A>"        section.     </P>
<P>        Conversely, if you are actively developing a kernel and are =
already  =20
     maintaining a Linux kernel Git repository of your own, you might =
find      =20
 it more convenient to work with kernel Metadata kept outside the        =

recipe-space.        Working with Metadata in this area can make =
iterative=20
development of        the Linux kernel more efficient outside of the =
BitBake=20
environment.     </P>
<DIV title=3D"3.3.1.&nbsp;Recipe-Space Metadata" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"recipe-space-metadata"></A>3.3.1.&nbsp;Recipe-Space=20
Metadata<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#r=
ecipe-space-metadata"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            When stored in recipe-space, the kernel Metadata files =
reside in=20
a            directory hierarchy below             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESEXTRAPATHS"=20
target=3D"_top"><CODE class=3D"filename">FILESEXTRAPATHS</CODE></A>.     =
       For=20
a linux-yocto recipe or for a Linux kernel recipe derived            by =
copying=20
and modifying             <CODE=20
class=3D"filename">oe-core/meta-skeleton/recipes-kernel/linux/linux-yocto=
-custom.bb</CODE>=20
           to a recipe in your layer, <CODE=20
class=3D"filename">FILESEXTRAPATHS</CODE>            is typically set to =
         =20
  <CODE class=3D"filename">${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-THISDIR"=20
target=3D"_top"><CODE class=3D"filename">THISDIR</CODE></A><CODE=20
class=3D"filename">}/${</CODE><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PN"=20
target=3D"_top"><CODE class=3D"filename">PN</CODE></A><CODE=20
class=3D"filename">}</CODE>.            See the "<A =
title=3D"2.2.&nbsp;Modifying an Existing Recipe"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
odifying-an-existing-recipe">Modifying=20
an Existing Recipe</A>"            section for more information.         =
</P>
<P>            Here is an example that shows a trivial tree of kernel =
Metadata  =20
         stored in recipe-space within a BSP layer:             </P>
<PRE class=3D"literallayout">     meta-<EM =
class=3D"replaceable"><CODE>my_bsp_layer</CODE></EM>/=0A=
     `-- recipes-kernel=0A=
         `-- linux=0A=
             `-- linux-yocto=0A=
                 |-- bsp-standard.scc=0A=
                 |-- bsp.cfg=0A=
                 `-- standard.cfg=0A=
            </PRE>
<P></P>
<P>            When the Metadata is stored in recipe-space, you must =
take       =20
    steps to ensure BitBake has the necessary information to decide      =
     =20
what files to fetch and when they need to be fetched again.            =
It is=20
only necessary to specify the <CODE class=3D"filename">.scc</CODE>       =
    =20
files on the             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>.            =
BitBake=20
parses them and fetches any files referenced in the             <CODE =
class=3D"filename">.scc</CODE>=20
files by the <CODE class=3D"filename">include</CODE>,             <CODE =
class=3D"filename">patch</CODE>,=20
or <CODE class=3D"filename">kconf</CODE> commands.            Because of =
this, it=20
is necessary to bump the recipe             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-PR"=20
target=3D"_top"><CODE class=3D"filename">PR</CODE></A>            value =
when=20
changing the content of files not explicitly listed            in the =
<CODE=20
class=3D"filename">SRC_URI</CODE>.         </P></DIV>
<DIV title=3D"3.3.2.&nbsp;Metadata Outside the Recipe-Space" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A=20
id=3D"metadata-outside-the-recipe-space"></A>3.3.2.&nbsp;Metadata =
Outside the=20
Recipe-Space<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
etadata-outside-the-recipe-space"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            When stored outside of the recipe-space, the kernel =
Metadata     =20
      files reside in a separate repository.            The OpenEmbedded =
build=20
system adds the Metadata to the build as            a "ktype=3Dmeta" =
repository=20
through the             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A>            =
variable.    =20
       As an example, consider the following <CODE=20
class=3D"filename">SRC_URI</CODE>            statement from the <CODE =
class=3D"filename">linux-yocto_4.4.bb</CODE>=20
           kernel recipe:             </P>
<PRE class=3D"literallayout">     SRC_URI =3D =
"git://git.yoctoproject.org/linux-yocto-4.4.git;name=3Dmachine;branch=3D$=
{KBRANCH}; \=0A=
                =
git://git.yoctoproject.org/yocto-kernel-cache;type=3Dkmeta;name=3Dmeta;br=
anch=3Dyocto-4.4;destsuffix=3D${KMETA}"=0A=
            </PRE>
<P><CODE class=3D"filename">${KMETA}</CODE>, in this context, is simply =
used to   =20
        name the directory into which the Git fetcher places the =
Metadata.      =20
     This behavior is no different than any multi-repository             =
<CODE=20
class=3D"filename">SRC_URI</CODE> statement used in a recipe.         =
</P>
<P>            You can keep kernel Metadata in a "kernel-cache", which =
is a     =20
      directory containing configuration fragments.            As with =
any=20
Metadata kept outside the recipe-space, you simply            need to =
use the=20
<CODE class=3D"filename">SRC_URI</CODE> statement with the            =
"type=3Dkmeta"=20
attribute.            Doing so makes the kernel Metadata available =
during the   =20
        configuration phase.         </P>
<P>            If you modify the Metadata, you must not forget to update =
the    =20
        <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRCREV"=20
target=3D"_top"><CODE class=3D"filename">SRCREV</CODE></A>            =
statements in=20
the kernel's recipe.            In particular, you need to update the    =
       =20
 <CODE class=3D"filename">SRCREV_meta</CODE> variable to match the =
commit in      =20
     the <CODE class=3D"filename">KMETA</CODE> branch you wish to use.   =
        =20
Changing the data in these branches and not updating the             =
<CODE=20
class=3D"filename">SRCREV</CODE> statements to match will cause the      =
     =20
build to fetch an older commit.         </P></DIV></DIV>
<DIV title=3D"3.4.&nbsp;Kernel Metadata Syntax" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-metadata-syntax"></A>3.4.&nbsp;Kernel Metadata Syntax<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-metadata-syntax"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        The kernel Metadata consists of three primary types of files: =
       =20
<CODE class=3D"filename">scc</CODE>         <SUP>[<A class=3D"footnote" =
id=3D"idm46153755869440"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
tn.idm46153755869440">1</A>]</SUP>=20
       description files, configuration fragments, and patches.        =
The <CODE=20
class=3D"filename">scc</CODE> files define variables and include or      =
 =20
otherwise reference any of the three file types.        The description =
files=20
are used to aggregate all types of kernel        Metadata into        =
what=20
ultimately describes the sources and the configuration required        =
to build=20
a Linux kernel tailored to a specific machine.     </P>
<P>        The <CODE class=3D"filename">scc</CODE> description files are =
used to=20
define two        fundamental types of kernel Metadata:         </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>Features</P></LI>
  <LI class=3D"listitem">
  <P>Board Support Packages (BSPs)</P></LI></UL></DIV>
<P></P>
<P>        Features aggregate sources in the form of patches and =
configuration  =20
     fragments into a modular reusable unit.        You can use features =
to=20
implement conceptually separate kernel        Metadata descriptions such =
as pure=20
configuration fragments,        simple patches, complex features, and =
kernel=20
types.         <A title=3D"3.4.4.&nbsp;Kernel Types" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types">Kernel=20
types</A> define general        kernel features and policy to be reused =
in the=20
BSPs.     </P>
<P>        BSPs define hardware-specific features and aggregate them =
with kernel=20
       types to form the final description of what will be assembled and =
built. =20
   </P>
<P>        While the kernel Metadata syntax does not enforce any logical =
      =20
separation of configuration fragments, patches, features or kernel       =
 types,=20
best practices dictate a logical separation of these types        of =
Metadata.  =20
     The following Metadata file hierarchy is recommended:         </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>base</CODE></EM>/=0A=
        bsp/=0A=
        cfg/=0A=
        features/=0A=
        ktypes/=0A=
        patches/=0A=
        </PRE>
<P></P>
<P>        The <CODE class=3D"filename">bsp</CODE> directory contains =
the        =20
<A title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
descriptions</A>.        The remaining directories all contain =
"features".      =20
 Separating <CODE class=3D"filename">bsp</CODE> from the rest of the =
structure    =20
   aids conceptualizing intended usage.     </P>
<P>        Use these guidelines to help place your <CODE=20
class=3D"filename">scc</CODE>        description files within the =
structure:      =20
  </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>If your file contains                only configuration fragments, =
place=20
  the file in the                 <CODE class=3D"filename">cfg</CODE>=20
  directory.</P></LI>
  <LI class=3D"listitem">
  <P>If your file contains                only source-code fixes, place =
the file=20
  in the                 <CODE class=3D"filename">patches</CODE>=20
  directory.</P></LI>
  <LI class=3D"listitem">
  <P>If your file encapsulates                a major feature, often =
combining=20
  sources and configurations,                place the file in <CODE =
class=3D"filename">features</CODE>=20
  directory.                 </P></LI>
  <LI class=3D"listitem">
  <P>If your file aggregates                non-hardware configuration =
and=20
  patches in order to define a                base kernel policy or =
major kernel=20
  type to be reused across                multiple BSPs, place the file =
in <CODE=20
  class=3D"filename">ktypes</CODE>                directory.             =
   =20
  </P></LI></UL></DIV>
<P></P>
<P>        These distinctions can easily become blurred - especially as  =
     =20
out-of-tree features slowly merge upstream over time.        Also, =
remember that=20
how the description files are placed is        a purely logical =
organization and=20
has no impact on the functionality        of the kernel Metadata.        =
There=20
is no impact because all of <CODE class=3D"filename">cfg</CODE>,         =
<CODE=20
class=3D"filename">features</CODE>, <CODE =
class=3D"filename">patches</CODE>, and    =20
    <CODE class=3D"filename">ktypes</CODE>, contain "features" as far as =
the=20
kernel        tools are concerned.     </P>
<P>        Paths used in kernel Metadata files are relative to         =
<CODE=20
class=3D"filename">&lt;base&gt;</CODE>, which is either         <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-FILESEXTRAPATHS"=20
target=3D"_top"><CODE class=3D"filename">FILESEXTRAPATHS</CODE></A>      =
  if you=20
are creating Metadata in         <A title=3D"3.3.1.&nbsp;Recipe-Space =
Metadata"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#r=
ecipe-space-metadata">recipe-space</A>,=20
       or <CODE class=3D"filename">meta/cfg/kernel-cache/</CODE> if you =
are=20
creating         <A title=3D"3.3.2.&nbsp;Metadata Outside the =
Recipe-Space" class=3D"link"=20
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
etadata-outside-the-recipe-space">Metadata=20
outside of the recipe-space</A>.     </P>
<DIV title=3D"3.4.1.&nbsp;Configuration" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"configuration"></A>3.4.1.&nbsp;Configuration<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
onfiguration"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            The simplest unit of kernel Metadata is the =
configuration-only   =20
        feature.            This feature consists of one or more Linux =
kernel=20
configuration            parameters in a configuration fragment file     =
      =20
(<CODE class=3D"filename">.cfg</CODE>) and a <CODE =
class=3D"filename">.scc</CODE>=20
file            that describes the fragment.         </P>
<P>            The Symmetric Multi-Processing (SMP) fragment included in =
the    =20
        <CODE class=3D"filename">linux-yocto-3.19</CODE> Git repository  =
         =20
consists of the following two files:             </P>
<PRE class=3D"literallayout">     cfg/smp.scc:=0A=
        define KFEATURE_DESCRIPTION "Enable SMP"=0A=
        define KFEATURE_COMPATIBILITY all=0A=
=0A=
        kconf hardware smp.cfg=0A=
=0A=
     cfg/smp.cfg:=0A=
        CONFIG_SMP=3Dy=0A=
        CONFIG_SCHED_SMT=3Dy=0A=
        # Increase default NR_CPUS from 8 to 64 so that platform with=0A=
        # more than 8 processors can be all activated at boot time=0A=
        CONFIG_NR_CPUS=3D64=0A=
            </PRE>
<P>            You can find information on configuration fragment files =
in the  =20
         "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#c=
reating-config-fragments"=20
target=3D"_top">Creating Configuration Fragments</A>"            section =
of the=20
Yocto Project Development Manual and in            the "<A =
title=3D"2.3.2.&nbsp;Generating Configuration Files"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">Generating=20
Configuration Files</A>"            section earlier in this manual.      =
   </P>
<P><A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KFEATURE_DESCRIPTION"=20
target=3D"_top"><CODE class=3D"filename">KFEATURE_DESCRIPTION</CODE></A> =
          =20
provides a short description of the fragment.            Higher level =
kernel=20
tools use this description.         </P>
<P>            The <CODE class=3D"filename">kconf</CODE> command is used =
to=20
include the            actual configuration fragment in an <CODE =
class=3D"filename">.scc</CODE>=20
           file, and the "hardware" keyword identifies the fragment as   =
       =20
 being hardware enabling, as opposed to general policy,            which =
would=20
use the "non-hardware" keyword.            The distinction is made for =
the=20
benefit of the configuration            validation tools, which warn you =
if a=20
hardware fragment            overrides a policy set by a non-hardware =
fragment. =20
           </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                The description file can =
include=20
multiple                 <CODE class=3D"filename">kconf</CODE> =
statements, one per=20
fragment.             </DIV>
<P></P>
<P>            As described in the            "<A =
title=3D"2.3.2.&nbsp;Generating Configuration Files"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">Generating=20
Configuration Files</A>"            section, you can use the following =
BitBake=20
command to audit your            configuration:             </P>
<PRE class=3D"literallayout">     $ bitbake linux-yocto -c =
kernel_configcheck -f=0A=
            </PRE>
<P></P></DIV>
<DIV title=3D"3.4.2.&nbsp;Patches" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"patches"></A>3.4.2.&nbsp;Patches<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#p=
atches"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            Patch descriptions are very similar to configuration =
fragment    =20
       descriptions, which are described in the previous section.        =
   =20
However, instead of a <CODE class=3D"filename">.cfg</CODE> file, these   =
        =20
descriptions work with source patches.         </P>
<P>            A typical patch includes a description file and the patch =
itself:=20
            </P>
<PRE class=3D"literallayout">     patches/mypatch.scc:=0A=
        patch mypatch.patch=0A=
=0A=
     patches/mypatch.patch:=0A=
        <EM class=3D"replaceable"><CODE>typical-patch</CODE></EM>=0A=
            </PRE>
<P>            You can create the typical <CODE =
class=3D"filename">.patch</CODE>  =20
         file using <CODE class=3D"filename">diff -Nurp</CODE> or        =
    =20
<CODE class=3D"filename">git format-patch</CODE>.         </P>
<P>            The description file can include multiple patch =
statements,      =20
     one per patch.         </P></DIV>
<DIV title=3D"3.4.3.&nbsp;Features" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"features"></A>3.4.3.&nbsp;Features<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eatures"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            Features are complex kernel Metadata types that consist   =
       =20
 of configuration fragments (<CODE class=3D"filename">kconf</CODE>), =
patches      =20
     (<CODE class=3D"filename">patch</CODE>), and possibly other feature =
         =20
 description files (<CODE class=3D"filename">include</CODE>).         =
</P>
<P>            Here is an example that shows a feature description file: =
       =20
    </P>
<PRE class=3D"literallayout">     features/myfeature.scc=0A=
        define KFEATURE_DESCRIPTION "Enable myfeature"=0A=
=0A=
        patch 0001-myfeature-core.patch=0A=
        patch 0002-myfeature-interface.patch=0A=
=0A=
        include cfg/myfeature_dependency.scc=0A=
        kconf non-hardware myfeature.cfg=0A=
            </PRE>
<P>            This example shows how the <CODE =
class=3D"filename">patch</CODE>=20
and             <CODE class=3D"filename">kconf</CODE> commands are used =
as well as=20
           how an additional feature description file is included.       =
  </P>
<P>            Typically, features are less granular than configuration  =
       =20
  fragments and are more likely than configuration fragments            =
and=20
patches to be the types of things you want to specify            in the =
<CODE=20
class=3D"filename">KERNEL_FEATURES</CODE> variable of the            =
Linux kernel=20
recipe.            See the "<A title=3D"3.2.&nbsp;Using Kernel Metadata =
in a Recipe"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-kernel-metadata-in-a-recipe">Using=20
Kernel Metadata in a Recipe</A>"            section earlier in the =
manual.      =20
  </P></DIV>
<DIV title=3D"3.4.4.&nbsp;Kernel Types" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"kernel-types"></A>3.4.4.&nbsp;Kernel =
Types<SPAN class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            A kernel type defines a high-level kernel policy by       =
    =20
aggregating non-hardware configuration fragments with            patches =
you=20
want to use when building a Linux kernels of a            specific type. =
       =20
   Syntactically, kernel types are no different than features            =
as=20
described in the "<A title=3D"3.4.3.&nbsp;Features" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eatures">Features</A>"=20
           section.            The <CODE=20
class=3D"filename">LINUX_KERNEL_TYPE</CODE> variable in the kernel       =
    =20
recipe selects the kernel type.            See the "<A =
title=3D"3.2.&nbsp;Using Kernel Metadata in a Recipe"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#u=
sing-kernel-metadata-in-a-recipe">Using=20
Kernel Metadata in a Recipe</A>"            section for more =
information.       =20
 </P>
<P>            As an example, the <CODE =
class=3D"filename">linux-yocto-3.19</CODE>=20
           tree defines three kernel types: "standard",            =
"tiny", and=20
"preempt-rt":             </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>"standard":                    Includes the generic Linux kernel =
policy of=20
  the Yocto                    Project linux-yocto kernel recipes.       =
       =20
       This policy includes, among other things, which file              =
     =20
  systems, networking options, core kernel features, and                 =
  =20
  debugging and tracing options are supported.                     =
</P></LI>
  <LI class=3D"listitem">
  <P>"preempt-rt":                    Applies the <CODE=20
  class=3D"filename">PREEMPT_RT</CODE>                    patches and =
the=20
  configuration options required to                    build a real-time =
Linux=20
  kernel.                    This kernel type inherits from the =
"standard"=20
  kernel type.                     </P></LI>
  <LI class=3D"listitem">
  <P>"tiny":                    Defines a bare minimum configuration =
meant to=20
  serve as a                    base for very small Linux kernels.       =
       =20
       The "tiny" kernel type is independent from the "standard"         =
       =20
     configuration.                    Although the "tiny" kernel type =
does not=20
  currently include                    any source changes, it might in =
the=20
  future.                     </P></LI></UL></DIV>
<P></P>
<P>            The "standard" kernel type is defined by             =
<CODE class=3D"filename">standard.scc</CODE>:=20
            </P>
<PRE class=3D"literallayout">     # Include this kernel type fragment to =
get the standard features and=0A=
     # configuration values.=0A=
=0A=
     # Include all standard features=0A=
     include standard-nocfg.scc=0A=
=0A=
     kconf non-hardware standard.cfg=0A=
=0A=
     # individual cfg block section=0A=
     include cfg/fs/devtmpfs.scc=0A=
     include cfg/fs/debugfs.scc=0A=
     include cfg/fs/btrfs.scc=0A=
     include cfg/fs/ext2.scc=0A=
     include cfg/fs/ext3.scc=0A=
     include cfg/fs/ext4.scc=0A=
=0A=
     include cfg/net/ipv6.scc=0A=
     include cfg/net/ip_nf.scc=0A=
     include cfg/net/ip6_nf.scc=0A=
     include cfg/net/bridge.scc=0A=
            </PRE>
<P></P>
<P>            As with any <CODE class=3D"filename">.scc</CODE> file, a  =
         =20
kernel type definition can aggregate other             <CODE=20
class=3D"filename">.scc</CODE> files with             <CODE=20
class=3D"filename">include</CODE> commands.            These definitions =
can also=20
directly pull in            configuration fragments and patches with the =
       =20
    <CODE class=3D"filename">kconf</CODE> and <CODE =
class=3D"filename">patch</CODE> =20
          commands, respectively.         </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>            It is not strictly necessary to =
create a=20
kernel type             <CODE class=3D"filename">.scc</CODE> file.       =
     The=20
Board Support Package (BSP) file can implicitly define            the =
kernel=20
type using a <CODE class=3D"filename">define             <A =
class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KTYPE"=20
target=3D"_top">KTYPE</A> myktype</CODE>            line.            See =
the "<A=20
title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
Descriptions</A>"            section for more information.         =
</DIV></DIV>
<DIV title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"bsp-descriptions"></A>3.4.5.&nbsp;BSP =
Descriptions<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            BSP descriptions combine kernel types with =
hardware-specific     =20
      features.            The hardware-specific portion is typically =
defined   =20
        independently, and then aggregated with each supported kernel    =
       =20
type.            Consider this simple BSP description that supports the  =
       =20
   <EM class=3D"replaceable"><CODE>mybsp</CODE></EM> machine:            =
 </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>mybsp</CODE></EM>.scc:=0A=
        define KMACHINE <EM class=3D"replaceable"><CODE>mybsp</CODE></EM>=0A=
        define KTYPE standard=0A=
        define KARCH i386=0A=
=0A=
        kconf <EM class=3D"replaceable"><CODE>mybsp</CODE></EM>.cfg=0A=
            </PRE>
<P>            Every BSP description should define the             <A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KMACHINE"=20
target=3D"_top"><CODE class=3D"filename">KMACHINE</CODE></A>,            =
 <A class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KTYPE"=20
target=3D"_top"><CODE class=3D"filename">KTYPE</CODE></A>,            =
and <A class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KARCH"=20
target=3D"_top"><CODE class=3D"filename">KARCH</CODE></A>            =
variables.     =20
      These variables allow the OpenEmbedded build system to identify    =
       =20
the description as meeting the criteria set by the recipe being          =
 =20
built.            This simple example supports the "mybsp" machine for =
the=20
"standard"            kernel and the "i386" architecture.         </P>
<P>            Be aware that a hard link between the             <CODE =
class=3D"filename">KTYPE</CODE>=20
variable and a kernel type            description file does not exist.   =
       =20
 Thus, if you do not have kernel types defined in your kernel            =

Metadata, you only need to ensure that the kernel recipe's             =
<A class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-LINUX_KERNEL_TYPE"=20
target=3D"_top"><CODE class=3D"filename">LINUX_KERNEL_TYPE</CODE></A>    =
       =20
variable and the <CODE class=3D"filename">KTYPE</CODE> variable in the   =
        =20
BSP description file match.             </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                Future versions of the =
tooling make=20
the specification of                 <CODE =
class=3D"filename">KTYPE</CODE> in the=20
BSP optional.             </DIV>
<P></P>
<P>            If you did want to separate your kernel policy from your  =
       =20
  hardware configuration, you could do so by specifying a kernel         =
  =20
type, such as "standard" and including that description file            =
in the=20
BSP description file.            See the "<A title=3D"3.4.4.&nbsp;Kernel =
Types"=20
class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-types">Kernel=20
Types</A>" section            for more information.         </P>
<P>            You might also have multiple hardware configurations that =
you    =20
       aggregate into a single hardware description file that you        =
   =20
could include in the BSP description file, rather than referencing       =
     a=20
single <CODE class=3D"filename">.cfg</CODE> file.            Consider =
the=20
following:             </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>mybsp</CODE></EM>.scc:=0A=
        define KMACHINE mybsp=0A=
        define KTYPE standard=0A=
        define KARCH i386=0A=
=0A=
        include standard.scc=0A=
        include <EM class=3D"replaceable"><CODE>mybsp</CODE></EM>-hw.scc=0A=
            </PRE>
<P></P>
<P>            In the above example, <CODE =
class=3D"filename">standard.scc</CODE> =20
          aggregates all the configuration fragments, patches, and       =
    =20
features that make up your standard kernel policy whereas             =
<EM class=3D"replaceable"><CODE>mybsp</CODE></EM><CODE=20
class=3D"filename">-hw.scc</CODE>            aggregates all those =
necessary       =20
    to support the hardware available on the             <EM=20
class=3D"replaceable"><CODE>mybsp</CODE></EM> machine.            For =
information=20
on how to break a complete             <CODE =
class=3D"filename">.config</CODE>=20
file into the various            configuration fragments, see the        =
    "<A=20
title=3D"2.3.2.&nbsp;Generating Configuration Files" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">Generating=20
Configuration Files</A>"            section.         </P>
<P>            Many real-world examples are more complex.            =
Like any=20
other <CODE class=3D"filename">.scc</CODE> file, BSP            =
descriptions can=20
aggregate features.            Consider the Minnow BSP definition from =
the      =20
      <CODE class=3D"filename">linux-yocto-3.19</CODE>            Git =
repository: =20
           </P>
<PRE class=3D"literallayout">     minnow.scc:=0A=
        include cfg/x86.scc=0A=
        include features/eg20t/eg20t.scc=0A=
        include cfg/dmaengine.scc=0A=
        include features/power/intel.scc=0A=
        include cfg/efi.scc=0A=
        include features/usb/ehci-hcd.scc=0A=
        include features/usb/ohci-hcd.scc=0A=
        include features/usb/usb-gadgets.scc=0A=
        include features/usb/touchscreen-composite.scc=0A=
        include cfg/timer/hpet.scc=0A=
        include cfg/timer/rtc.scc=0A=
        include features/leds/leds.scc=0A=
        include features/spi/spidev.scc=0A=
        include features/i2c/i2cdev.scc=0A=
=0A=
        # Earlyprintk and port debug requires 8250=0A=
        kconf hardware cfg/8250.cfg=0A=
=0A=
        kconf hardware minnow.cfg=0A=
        kconf hardware minnow-dev.cfg=0A=
            </PRE>
<P></P>
<P>            The <CODE class=3D"filename">minnow.scc</CODE> =
description file=20
includes            a hardware configuration fragment            (<CODE =
class=3D"filename">minnow.cfg</CODE>)=20
specific to the Minnow            BSP as well as several more general=20
configuration            fragments and features enabling hardware found =
on the  =20
         machine.            This description file is then included in =
each of=20
the three            "minnow" description files for the supported kernel =
types  =20
         (i.e. "standard", "preempt-rt", and "tiny").            =
Consider the=20
"minnow" description for the "standard" kernel            type:          =
   </P>
<PRE class=3D"literallayout">     minnow-standard.scc:=0A=
        define KMACHINE minnow=0A=
        define KTYPE standard=0A=
        define KARCH i386=0A=
=0A=
        include ktypes/standard=0A=
=0A=
        include minnow.scc=0A=
=0A=
        # Extra minnow configs above the minimal defined in minnow.scc=0A=
        include cfg/efi-ext.scc=0A=
        include features/media/media-all.scc=0A=
        include features/sound/snd_hda_intel.scc=0A=
=0A=
        # The following should really be in standard.scc=0A=
        # USB live-image support=0A=
        include cfg/usb-mass-storage.scc=0A=
        include cfg/boot-live.scc=0A=
=0A=
        # Basic profiling=0A=
        include features/latencytop/latencytop.scc=0A=
        include features/profiling/profiling.scc=0A=
=0A=
        # Requested drivers that don't have an existing scc=0A=
        kconf hardware minnow-drivers-extra.cfg=0A=
            </PRE>
<P>            The <CODE class=3D"filename">include</CODE> command =
midway through=20
the file            includes the <CODE =
class=3D"filename">minnow.scc</CODE>=20
description that            defines all hardware enablements for the BSP =
that is=20
common to all            kernel types.            Using this command=20
significantly reduces duplication.         </P>
<P>            Now consider the "minnow" description for the "tiny" =
kernel type:=20
            </P>
<PRE class=3D"literallayout">     minnow-tiny.scc:=0A=
        define KMACHINE minnow=0A=
        define KTYPE tiny=0A=
        define KARCH i386=0A=
=0A=
        include ktypes/tiny=0A=
=0A=
        include minnow.scc=0A=
            </PRE>
<P>            As you might expect, the "tiny" description includes =
quite a     =20
      bit less.            In fact, it includes only the minimal policy =
defined=20
by the            "tiny" kernel type and the hardware-specific =
configuration=20
required            for booting the machine along with the most basic=20
functionality of            the system as defined in the base "minnow"=20
description file.         </P>
<P>            Notice again the three critical variables:             =
<CODE=20
class=3D"filename">KMACHINE</CODE>, <CODE =
class=3D"filename">KTYPE</CODE>,          =20
 and <CODE class=3D"filename">KARCH</CODE>.            Of these =
variables, only=20
the <CODE class=3D"filename">KTYPE</CODE> has changed.            It is =
now set to=20
"tiny".         </P></DIV></DIV>
<DIV title=3D"3.5.&nbsp;Organizing Your Source" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"organizing-your-source"></A>3.5.&nbsp;Organizing Your Source<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#o=
rganizing-your-source"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        Many recipes based on the <CODE=20
class=3D"filename">linux-yocto-custom.bb</CODE>        recipe use Linux =
kernel=20
sources that have only a single        branch - "master".        This =
type of=20
repository structure is fine for linear development        supporting a =
single=20
machine and architecture.        However, if you work with multiple =
boards and=20
architectures,        a kernel source repository with multiple branches =
is more =20
      efficient.        For example, suppose you need a series of =
patches for=20
one board to boot.        Sometimes, these patches are works-in-progress =
or=20
fundamentally wrong,        yet they are still necessary for specific =
boards.   =20
    In these situations, you most likely do not want to include these    =
   =20
patches in every kernel you build (i.e. have the patches as part of      =
  the=20
lone "master" branch).        It is situations like these that give rise =
to=20
multiple branches used        within a Linux kernel sources Git =
repository.    =20
</P>
<P>        Repository organization strategies exist that maximize source =
reuse, =20
      remove redundancy, and logically order your changes.        This =
section=20
presents strategies for the following cases:         </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>Encapsulating patches in a feature description                and =
only=20
  including the patches in the BSP descriptions of                the =
applicable=20
  boards.</P></LI>
  <LI class=3D"listitem">
  <P>Creating a machine branch in your                kernel source =
repository=20
  and applying the patches on that                branch only.</P></LI>
  <LI class=3D"listitem">
  <P>Creating a feature branch in your                kernel source =
repository=20
  and merging that branch into your                BSP when=20
needed.</P></LI></UL></DIV>
<P></P>
<P>        The approach you take is entirely up to you        and =
depends on=20
what works best for your development model.     </P>
<DIV title=3D"3.5.1.&nbsp;Encapsulating Patches" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"encapsulating-patches"></A>3.5.1.&nbsp;Encapsulating=20
Patches<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#e=
ncapsulating-patches"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            if you are reusing patches from an external tree and are =
not     =20
      working on the patches, you might find the encapsulated feature    =
       =20
to be appropriate.            Given this scenario, you do not need to =
create any=20
branches in the            source repository.            Rather, you =
just take=20
the static patches you need and encapsulate            them within a =
feature=20
description.            Once you have the feature description, you =
simply=20
include that into            the BSP description as described in the     =
      =20
"<A title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
Descriptions</A>"            section.         </P>
<P>            You can find information on how to create patches and BSP =
       =20
   descriptions in the "<A title=3D"3.4.2.&nbsp;Patches" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#p=
atches">Patches</A>"=20
and            "<A title=3D"3.4.5.&nbsp;BSP Descriptions" class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
sp-descriptions">BSP=20
Descriptions</A>"            sections.         </P></DIV>
<DIV title=3D"3.5.2.&nbsp;Machine Branches" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"machine-branches"></A>3.5.2.&nbsp;Machine =
Branches<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#m=
achine-branches"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            When you have multiple machines and architectures to =
support,    =20
       or you are actively working on board support, it is more          =
 =20
efficient to create branches in the repository based on            =
individual=20
machines.            Having machine branches allows common source to =
remain in=20
the            "master" branch with any features specific to a machine =
stored   =20
        in the appropriate machine branch.            This organization =
method=20
frees you from continually reintegrating            your patches into a =
feature.=20
        </P>
<P>            Once you have a new branch, you can set up your kernel =
Metadata  =20
         to use the branch a couple different ways.            In the =
recipe,=20
you can specify the new branch as the             <CODE=20
class=3D"filename">KBRANCH</CODE> to use for the board as            =
follows:     =20
       </P>
<PRE class=3D"literallayout">     KBRANCH =3D "mynewbranch"=0A=
            </PRE>
<P>            Another method is to use the <CODE =
class=3D"filename">branch</CODE>=20
command            in the BSP description:             </P>
<PRE class=3D"literallayout">     mybsp.scc:=0A=
        define KMACHINE mybsp=0A=
        define KTYPE standard=0A=
        define KARCH i386=0A=
        include standard.scc=0A=
=0A=
        branch mynewbranch=0A=
=0A=
        include mybsp-hw.scc=0A=
            </PRE>
<P></P>
<P>            If you find            yourself with numerous branches, =
you might=20
consider using a            hierarchical branching system similar to =
what the=20
linux-yocto Linux            kernel repositories use:             </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>common</CODE></EM>/<EM =
class=3D"replaceable"><CODE>kernel_type</CODE></EM>/<EM =
class=3D"replaceable"><CODE>machine</CODE></EM>=0A=
            </PRE>
<P></P>
<P>            If you had two kernel types, "standard" and "small" for   =
       =20
 instance, three machines, and <EM =
class=3D"replaceable"><CODE>common</CODE></EM> =20
          as <CODE class=3D"filename">mydir</CODE>, the branches in your =
         =20
 Git repository might look like this:             </P>
<PRE class=3D"literallayout">     mydir/base=0A=
     mydir/standard/base=0A=
     mydir/standard/machine_a=0A=
     mydir/standard/machine_b=0A=
     mydir/standard/machine_c=0A=
     mydir/small/base=0A=
     mydir/small/machine_a=0A=
            </PRE>
<P></P>
<P>            This organization can help clarify the branch =
relationships.     =20
      In this case, <CODE =
class=3D"filename">mydir/standard/machine_a</CODE>      =20
     includes everything in <CODE class=3D"filename">mydir/base</CODE> =
and        =20
    <CODE class=3D"filename">mydir/standard/base</CODE>.            The =
"standard"=20
and "small" branches add sources specific to those            kernel =
types that=20
for whatever reason are not appropriate for the            other =
branches.      =20
      </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>The "base" branches are an artifact of the =
way Git=20
manages                its data internally on the filesystem: Git will =
not allow=20
you                to use <CODE class=3D"filename">mydir/standard</CODE> =
and      =20
          <CODE class=3D"filename">mydir/standard/machine_a</CODE> =
because it     =20
          would have to create a file and a directory named "standard".  =
       =20
   </DIV>
<P></P></DIV>
<DIV title=3D"3.5.3.&nbsp;Feature Branches" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A id=3D"feature-branches"></A>3.5.3.&nbsp;Feature =
Branches<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#f=
eature-branches"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>            When you are actively developing new features, it can be =
more    =20
       efficient to work with that feature as a branch, rather than      =
     =20
as a set of patches that have to be regularly updated.            The =
Yocto=20
Project Linux kernel tools provide for this with            the <CODE =
class=3D"filename">git=20
merge</CODE> command.         </P>
<P>            To merge a feature branch into a BSP, insert the          =
  =20
<CODE class=3D"filename">git merge</CODE> command after any             =
<CODE=20
class=3D"filename">branch</CODE> commands:             </P>
<PRE class=3D"literallayout">     mybsp.scc:=0A=
        define KMACHINE mybsp=0A=
        define KTYPE standard=0A=
        define KARCH i386=0A=
        include standard.scc=0A=
=0A=
        branch mynewbranch=0A=
        git merge myfeature=0A=
=0A=
        include mybsp-hw.scc=0A=
            </PRE>
<P></P></DIV></DIV>
<DIV title=3D"3.6.&nbsp;SCC Description File Reference" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A =
id=3D"scc-reference"></A>3.6.&nbsp;SCC=20
Description File Reference<SPAN class=3D"permalink"><A =
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
cc-reference"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        This section provides a brief reference for the commands you =
can use =20
      within an SCC description file (<CODE =
class=3D"filename">.scc</CODE>):      =20
  </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">branch [ref]</CODE>:                =
Creates a new=20
  branch relative to the current branch                (typically <CODE =
class=3D"filename">${KTYPE}</CODE>)=20
  using                the currently checked-out branch, or "ref" if =
specified. =20
                 </P></LI>
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">define</CODE>:                Defines =
variables,=20
  such as <CODE class=3D"filename">KMACHINE</CODE>,                 =
<CODE class=3D"filename">KTYPE</CODE>,=20
  <CODE class=3D"filename">KARCH</CODE>,                and <CODE=20
  class=3D"filename">KFEATURE_DESCRIPTION</CODE>.</P></LI>
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">include SCC_FILE</CODE>:                =
Includes an=20
  SCC file in the current file.                The file is parsed as if =
you had=20
  inserted it inline.                 </P></LI>
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">kconf [hardware|non-hardware] =
CFG_FILE</CODE>:      =20
           Queues a configuration fragment for merging into the final    =
       =20
      Linux <CODE class=3D"filename">.config</CODE> file.</P></LI>
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">git merge GIT_BRANCH</CODE>:               =
 Merges=20
  the feature branch into the current branch.                 </P></LI>
  <LI class=3D"listitem">
  <P><CODE class=3D"filename">patch PATCH_FILE</CODE>:                =
Applies the=20
  patch to the current Git branch.</P></LI></UL></DIV>
<P></P></DIV>
<DIV class=3D"footnotes"><BR>
<HR width=3D"100" align=3D"left">

<DIV class=3D"footnote">
<P><SUP>[<A class=3D"para" id=3D"ftn.idm46153755869440" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153755869440">1</A>]=20
</SUP>                 <CODE class=3D"filename">scc</CODE> stands for =
Series=20
Configuration                Control, but the naming has less =
significance in=20
the                current implementation of the tooling than it had in =
the     =20
          past.                Consider <CODE =
class=3D"filename">scc</CODE> files=20
to be description files.             </P></DIV></DIV></DIV>
<DIV title=3D"Appendix&nbsp;A.&nbsp;Advanced Kernel Concepts" =
class=3D"appendix">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A=20
id=3D"kernel-dev-concepts-appx"></A>Appendix&nbsp;A.&nbsp;Advanced =
Kernel=20
Concepts<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-concepts-appx"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-big-picture">A.1.=20
  Yocto Project Kernel Development and Maintenance</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-architecture">A.2.=20
  Kernel Architecture</A></SPAN></DT>
  <DD>
  <DL>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
rchitecture-overview">A.2.1.=20
    Overview</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
ranching-and-workflow">A.2.2.=20
    Branching Strategy and Workflow</A></SPAN></DT>
    <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
ource-code-manager-git">A.2.3.=20
    Source Code Manager - Git</A></SPAN></DT></DL></DD></DL></DIV>
<DIV title=3D"A.1.&nbsp;Yocto Project Kernel Development and =
Maintenance" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-big-picture"></A>A.1.&nbsp;Yocto Project Kernel Development =
and=20
Maintenance<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-big-picture"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            Kernels available through the Yocto Project, like other =
kernels,=20
are based off the Linux            kernel releases from <A =
class=3D"ulink" href=3D"http://www.kernel.org/"=20
target=3D"_top">http://www.kernel.org/</A>.            At the beginning =
of a major=20
development cycle, the Yocto Project team            chooses its kernel =
based on=20
factors such as release timing, the anticipated release            =
timing of=20
final upstream <CODE class=3D"filename">kernel.org</CODE> versions, and =
Yocto=20
Project            feature requirements.            Typically, the =
kernel chosen=20
is in the            final stages of development by the community.       =
     In=20
other words, the kernel is in the release            candidate or "rc" =
phase and=20
not yet a final release.            But, by being in the final stages of =

external development, the team knows that the             <CODE=20
class=3D"filename">kernel.org</CODE> final release will clearly be =
within the=20
early stages of            the Yocto Project development window.         =
</P>
<P>            This balance allows the team to deliver the most =
up-to-date=20
kernel            possible, while still ensuring that the team has a =
stable=20
official release for            the baseline Linux kernel version.       =
  </P>
<P>            The ultimate source for kernels available through the =
Yocto=20
Project are released kernels            from <CODE=20
class=3D"filename">kernel.org</CODE>.            In addition to a =
foundational=20
kernel from <CODE class=3D"filename">kernel.org</CODE>, the            =
kernels=20
available contain a mix of important new mainline            =
developments,=20
non-mainline developments (when there is no alternative),            =
Board=20
Support Package (BSP) developments,            and custom features.      =
     =20
These additions result in a commercially released Yocto Project Linux =
kernel=20
that caters            to specific embedded designer needs for targeted=20
hardware.         </P>
<P>            Once a kernel is officially released, the Yocto Project =
team goes=20
into            their next development cycle, or upward revision (uprev) =
cycle,=20
while still            continuing maintenance on the released kernel.    =
       =20
It is important to note that the most sustainable and stable way         =
   to=20
include feature development upstream is through a kernel uprev process.  =
       =20
  Back-porting hundreds of individual fixes and minor features from =
various     =20
      kernel versions is not sustainable and can easily compromise =
quality.     =20
   </P>
<P>            During the uprev cycle, the Yocto Project team uses an =
ongoing=20
analysis of            kernel development, BSP support, and release =
timing to=20
select the best            possible <CODE =
class=3D"filename">kernel.org</CODE>=20
version.            The team continually monitors community kernel       =
    =20
development to look for significant features of interest.            The =
team=20
does consider back-porting large features if they have a significant =
advantage. =20
          User or community demand can also trigger a back-port or =
creation of=20
new            functionality in the Yocto Project baseline kernel during =
the=20
uprev cycle.         </P>
<P>            Generally speaking, every new kernel both adds features =
and=20
introduces new bugs.            These consequences are the basic =
properties of=20
upstream kernel development and are            managed by the Yocto =
Project=20
team's kernel strategy.            It is the Yocto Project team's policy =
to not=20
back-port minor features to the released kernel.            They only =
consider=20
back-porting significant technological jumps - and, that is done         =
  =20
after a complete gap analysis.            The reason for this policy is =
that=20
back-porting any small to medium sized change            from an =
evolving kernel=20
can easily create mismatches, incompatibilities and very            =
subtle=20
errors.         </P>
<P>            These policies result in both a stable and a cutting      =
     =20
edge kernel that mixes forward ports of existing features and =
significant and=20
critical            new functionality.            Forward porting =
functionality=20
in the kernels available through the Yocto Project kernel            can =
be=20
thought of as a "micro uprev."            The many =E2=80=9Cmicro =
uprevs=E2=80=9D produce a=20
kernel version with a mix of            important new mainline, =
non-mainline,=20
BSP developments and feature integrations.            This kernel gives =
insight=20
into new features and allows focused            amounts of testing to be =
done on=20
the kernel, which prevents            surprises when selecting the next =
major=20
uprev.            The quality of these cutting edge kernels is evolving =
and the=20
kernels are used in leading edge            feature and BSP development. =
       =20
</P></DIV>
<DIV title=3D"A.2.&nbsp;Kernel Architecture" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-architecture"></A>A.2.&nbsp;Kernel Architecture<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-architecture"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            This section describes the architecture of the kernels =
available=20
through the            Yocto Project and provides information            =
on the=20
mechanisms used to achieve that architecture.         </P>
<DIV title=3D"A.2.1.&nbsp;Overview" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"architecture-overview"></A>A.2.1.&nbsp;Overview<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#a=
rchitecture-overview"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                As mentioned earlier, a key goal of the Yocto Project =
is to=20
present the                developer with                a kernel that =
has a=20
clear and continuous history that is visible to the user.                =
The=20
architecture and mechanisms used achieve that goal in a manner similar =
to the   =20
            upstream <CODE class=3D"filename">kernel.org</CODE>.         =
    </P>
<P>                You can think of a Yocto Project kernel as consisting =
of a=20
baseline Linux kernel with                added features logically =
structured on=20
top of the baseline.                The features are tagged and =
organized by way=20
of a branching strategy implemented by the                source code =
manager=20
(SCM) Git.                For information on Git as applied to the Yocto =

Project, see the                "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#g=
it"=20
target=3D"_top">Git</A>" section in the                Yocto Project =
Development=20
Manual.             </P>
<P>                The result is that the user has the ability to see =
the added=20
features and                the commits that make up those features.     =
       =20
   In addition to being able to see added features, the user can also =
view the=20
history of what                made up the baseline kernel.             =
</P>
<P>                The following illustration shows the conceptual Yocto =
Project=20
kernel.             </P>
<P></P>
<TABLE width=3D"540" border=3D"0" cellspacing=3D"0" cellpadding=3D"0" =
summary=3D"manufactured viewport for HTML img">
  <TBODY>
  <TR style=3D"height: 630px;">
    <TD align=3D"center"><IMG align=3D"middle" =
src=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/figures/kernel-arc=
hitecture-overview.png"></TD></TR></TBODY></TABLE>
<P></P>
<P>                In the illustration, the "Kernel.org Branch Point"    =
       =20
    marks the specific spot (or release) from                which the =
Yocto=20
Project kernel is created.                From this point "up" in the =
tree,=20
features and differences are organized and tagged.             </P>
<P>                The "Yocto Project Baseline Kernel" contains =
functionality=20
that is common to every kernel                type and BSP that is =
organized=20
further up the tree.                Placing these common features in the =
       =20
       tree this way means features do not have to be duplicated along=20
individual branches of the                structure.             </P>
<P>                From the Yocto Project Baseline Kernel, branch points =

represent specific functionality                for individual BSPs as =
well as=20
real-time kernels.                The illustration represents this =
through three=20
BSP-specific branches and a real-time                kernel branch.      =
       =20
  Each branch represents some unique functionality for the BSP or a =
real-time=20
kernel.             </P>
<P>                In this example structure, the real-time kernel =
branch has=20
common features for all                real-time kernels and contains    =
       =20
    more branches for individual BSP-specific real-time kernels.         =
      =20
The illustration shows three branches as an example.                Each =
branch=20
points the way to specific, unique features for a respective real-time   =
       =20
     kernel as they apply to a given BSP.             </P>
<P>                The resulting tree structure presents a clear path of =
markers=20
(or branches) to the                developer that, for all practical =
purposes,=20
is the kernel needed for any given set                of requirements.   =
       =20
  </P></DIV>
<DIV title=3D"A.2.2.&nbsp;Branching Strategy and Workflow" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"branching-and-workflow"></A>A.2.2.&nbsp;Branching=20
Strategy and Workflow<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
ranching-and-workflow"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                The Yocto Project team creates kernel branches at =
points=20
where functionality is                no longer shared and thus, needs =
to be=20
isolated.                For example, board-specific incompatibilities =
would=20
require different functionality                and would require a =
branch to=20
separate the features.                Likewise, for specific kernel =
features,=20
the same branching strategy is used.             </P>
<P>                This branching strategy results in a tree that has =
features=20
organized to be specific                for particular functionality, =
single=20
kernel types, or a subset of kernel types.                This strategy =
also=20
results in not having to store the same feature twice                =
internally=20
in the tree.                Rather, the kernel team stores the unique=20
differences required to apply the                feature onto the kernel =
type in=20
question.                 </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                    The Yocto Project team =
strives to=20
place features in the tree such that they can be                    =
shared by=20
all boards and kernel types where possible.                    However, =
during=20
development cycles or when large features are merged,                    =
the=20
team cannot always follow this practice.                    In those =
cases, the=20
team uses isolated branches to merge features.                 </DIV>
<P></P>
<P>                BSP-specific code additions are handled in a similar =
manner=20
to kernel-specific additions.                Some BSPs only make sense =
given=20
certain kernel types.                So, for these types, the team =
creates=20
branches off the end of that kernel type for all                of the =
BSPs that=20
are supported on that kernel type.                From the perspective =
of the=20
tools that create the BSP branch, the BSP is really no                =
different=20
than a feature.                Consequently, the same branching strategy =
applies=20
to BSPs as it does to features.                So again, rather than =
store the=20
BSP twice, the team only stores the unique                differences =
for the=20
BSP across the supported multiple kernels.             </P>
<P>                While this strategy can result in a tree with a =
significant=20
number of branches, it is                important to realize that from =
the=20
developer's point of view, there is a linear                path that =
travels=20
from the baseline <CODE class=3D"filename">kernel.org</CODE>, through a =
select    =20
           group of features and ends with their BSP-specific commits.   =
       =20
     In other words, the divisions of the kernel are transparent and are =
not=20
relevant                to the developer on a day-to-day basis.          =
     =20
From the developer's perspective, this path is the "master" branch.      =
       =20
  The developer does not need to be aware of the existence of any other =
branches=20
at all.                Of course, there is value in the existence of =
these=20
branches                in the tree, should a person decide to explore =
them.    =20
           For example, a comparison between two BSPs at either the =
commit level=20
or at the line-by-line                code <CODE =
class=3D"filename">diff</CODE>=20
level is now a trivial operation.             </P>
<P>                Working with the kernel as a structured tree follows=20
recognized community best practices.                In particular, the =
kernel as=20
shipped with the product, should be                considered an =
"upstream=20
source" and viewed as a series of                historical and =
documented=20
modifications (commits).                These modifications represent =
the=20
development and stabilization done                by the Yocto Project =
kernel=20
development team.             </P>
<P>                Because commits only change at significant release =
points in=20
the product life cycle,                developers can work on a branch =
created  =20
             from the last relevant commit in the shipped Yocto Project =
kernel. =20
              As mentioned previously, the structure is transparent to =
the=20
developer                because the kernel tree is left in this state =
after=20
cloning and building the kernel.             </P></DIV>
<DIV title=3D"A.2.3.&nbsp;Source Code Manager - Git" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H3 class=3D"title"><A =
id=3D"source-code-manager-git"></A>A.2.3.&nbsp;Source Code=20
Manager - Git<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#s=
ource-code-manager-git"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H3></DIV></DIV></DIV>
<P>                The Source Code Manager (SCM) is Git.                =
This SCM=20
is the obvious mechanism for meeting the previously mentioned goals.     =
       =20
   Not only is it the SCM for <CODE class=3D"filename">kernel.org</CODE> =
but,     =20
          Git continues to grow in popularity and supports many =
different work=20
flows,                front-ends and management techniques.             =
</P>
<P>                You can find documentation on Git at <A =
class=3D"ulink" href=3D"http://git-scm.com/documentation"=20
target=3D"_top">http://git-scm.com/documentation</A>.                You =
can also=20
get an introduction to Git as it applies to the Yocto Project in the     =
       =20
   "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#g=
it"=20
target=3D"_top">Git</A>"                section in the Yocto Project =
Development=20
Manual.                These referenced sections overview Git and =
describe a=20
minimal set of                commands that allows you to be functional =
using=20
Git.                 </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                    You can use as much, or =
as=20
little, of what Git has to offer to accomplish what                    =
you need=20
for your project.                    You do not have to be a "Git =
Master" in=20
order to use it with the Yocto Project.                 </DIV>
<P></P></DIV></DIV></DIV>
<DIV title=3D"Appendix&nbsp;B.&nbsp;Kernel Maintenance" =
class=3D"appendix">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A =
id=3D"kernel-dev-maint-appx"></A>Appendix&nbsp;B.&nbsp;Kernel=20
Maintenance<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-maint-appx"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ree-construction">B.1.=20
  Tree Construction</A></SPAN></DT>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uild-strategy">B.2.=20
  Build Strategy</A></SPAN></DT></DL></DIV>
<DIV title=3D"B.1.&nbsp;Tree Construction" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"tree-construction"></A>B.1.&nbsp;Tree Construction<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#t=
ree-construction"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            This section describes construction of the Yocto Project =
kernel=20
source repositories            as accomplished by the Yocto Project team =
to=20
create kernel repositories.            These kernel repositories are =
found under=20
the heading "Yocto Linux Kernel" at             <A class=3D"ulink" =
href=3D"http://git.yoctoproject.org/cgit.cgi"=20
target=3D"_top">http://git.yoctoproject.org/cgit.cgi</A>            and =
can be=20
shipped as part of a Yocto Project release.            The team creates =
these=20
repositories by            compiling and executing the set of feature=20
descriptions for every BSP            and feature in the product.        =
   =20
Those feature descriptions list all necessary patches,            =
configuration,=20
branching, tagging and feature divisions found in a kernel.            =
Thus, the=20
Yocto Project kernel repository (or tree) is built.         </P>
<P>            The existence of this tree allows you to access and clone =
a=20
particular            Yocto Project kernel repository and use it to =
build images=20
based on their configurations            and features.         </P>
<P>            You can find the files used to describe all the valid =
features=20
and BSPs            in the Yocto Project kernel in any clone of the =
Yocto=20
Project kernel source repository            Git tree.            For =
example,=20
the following command clones the Yocto Project baseline kernel that      =
     =20
branched off of <CODE class=3D"filename">linux.org</CODE> version 3.19:  =
         =20
 </P>
<PRE class=3D"literallayout">     $ git clone =
git://git.yoctoproject.org/linux-yocto-3.19=0A=
            </PRE>
<P>            For another example of how to set up a local Git =
repository of=20
the Yocto Project            kernel files, see the            "<A =
class=3D"ulink"=20
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#l=
ocal-kernel-files"=20
target=3D"_top">Yocto Project Kernel</A>" bulleted            item in =
the Yocto=20
Project Development Manual.         </P>
<P>            Once you have cloned the kernel Git repository on your =
local=20
machine, you can            switch to the <CODE =
class=3D"filename">meta</CODE>=20
branch within the repository.            Here is an example that assumes =
the=20
local Git repository for the kernel is in            a top-level =
directory named=20
<CODE class=3D"filename">linux-yocto-3.19</CODE>:             </P>
<PRE class=3D"literallayout">     $ cd linux-yocto-3.19=0A=
     $ git checkout -b meta origin/meta=0A=
            </PRE>
<P>            Once you have checked out and switched to the <CODE =
class=3D"filename">meta</CODE>=20
branch,            you can see a snapshot of all the kernel =
configuration and=20
feature descriptions that are            used to build that particular =
kernel=20
repository.            These descriptions are in the form of <CODE =
class=3D"filename">.scc</CODE>=20
files.         </P>
<P>            You should realize, however, that browsing your local =
kernel=20
repository            for feature descriptions and patches is not an =
effective=20
way to determine what is in a            particular kernel branch.       =
    =20
Instead, you should use Git directly to discover the changes in a =
branch.       =20
    Using Git is an efficient and flexible way to inspect changes to the =
kernel.=20
            </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>                Ground up reconstruction of =
the=20
complete kernel tree is an action only taken by the                Yocto =
Project=20
team during an active development cycle.                When you create =
a clone=20
of the kernel Git repository, you are simply making it               =20
efficiently available for building and development.             </DIV>
<P></P>
<P>            The following steps describe what happens when the Yocto =
Project=20
Team constructs            the Yocto Project kernel source Git =
repository (or=20
tree) found at             <A class=3D"ulink" =
href=3D"http://git.yoctoproject.org/cgit.cgi"=20
target=3D"_top">http://git.yoctoproject.org/cgit.cgi</A> given the       =
    =20
introduction of a new top-level kernel feature or BSP.            These =
are the=20
actions that effectively create the tree            that includes the =
new=20
feature, patch or BSP:             </P>
<DIV class=3D"orderedlist">
<OL class=3D"orderedlist" type=3D"1">
  <LI class=3D"listitem">
  <P>A top-level kernel feature is passed to the kernel build subsystem. =
       =20
             Normally, this feature is a BSP for a particular kernel=20
  type.</P></LI>
  <LI class=3D"listitem">
  <P>The file that describes the top-level feature is located by =
searching      =20
               these system directories:                     </P>
  <DIV class=3D"itemizedlist">
  <UL class=3D"itemizedlist" type=3D"disc">
    <LI class=3D"listitem">
    <P>The in-tree kernel-cache directories, which are located           =
       =20
             in <CODE =
class=3D"filename">meta/cfg/kernel-cache</CODE></P></LI>
    <LI class=3D"listitem">
    <P>Areas pointed to by <CODE class=3D"filename">SRC_URI</CODE> =
statements     =20
                          found in recipes</P></LI></UL></DIV>
  <P>                    For a typical build, the target of the search =
is a     =20
                feature description in an <CODE =
class=3D"filename">.scc</CODE>=20
  file                    whose name follows this format:                =
    =20
  </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>bsp_name</CODE></EM>-<EM =
class=3D"replaceable"><CODE>kernel_type</CODE></EM>.scc=0A=
                    </PRE>
  <P></P></LI>
  <LI class=3D"listitem">
  <P>Once located, the feature description is either compiled into a =
simple=20
  script                    of actions, or into an existing equivalent =
script=20
  that is already part of the                    shipped =
kernel.</P></LI>
  <LI class=3D"listitem">
  <P>Extra features are appended to the top-level feature description.   =
       =20
           These features can come from the                     <A =
class=3D"ulink"=20
  =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-KERNEL_FEATURES"=20
  target=3D"_top"><CODE class=3D"filename">KERNEL_FEATURES</CODE></A>    =
           =20
      variable in recipes.</P></LI>
  <LI class=3D"listitem">
  <P>Each extra feature is located, compiled and appended to the script  =
       =20
            as described in step three.</P></LI>
  <LI class=3D"listitem">
  <P>The script is executed to produce a series of <CODE=20
  class=3D"filename">meta-*</CODE>                    directories.       =
         =20
     These directories are descriptions of all the branches, tags, =
patches and=20
  configurations that                    need to be applied to the base =
Git=20
  repository to completely create the                    source (build) =
branch=20
  for the new BSP or feature.</P></LI>
  <LI class=3D"listitem">
  <P>The base repository is cloned, and the actions                    =
listed in=20
  the <CODE class=3D"filename">meta-*</CODE> directories are applied to =
the       =20
              tree.</P></LI>
  <LI class=3D"listitem">
  <P>The Git repository is left with the desired branch checked out and =
any     =20
                required branching, patching and tagging has been=20
  performed.</P></LI></OL></DIV>
<P></P>
<P>            The kernel tree is now ready for developer consumption to =
be=20
locally cloned,            configured, and built into a Yocto Project =
kernel=20
specific to some target hardware.             </P>
<DIV title=3D"Note" class=3D"note" style=3D"margin-right: 0.5in; =
margin-left: 0.5in;">
<H3 class=3D"title">Note</H3>
<P>The generated <CODE class=3D"filename">meta-*</CODE> directories add =
to the=20
kernel                as shipped with the Yocto Project release.         =
      =20
Any add-ons and configuration data are applied to the end of an existing =
branch.=20
               The full repository generation that is found in the       =
       =20
 official Yocto Project kernel repositories at                 <A =
class=3D"ulink"=20
href=3D"http://git.yoctoproject.org/cgit.cgi"=20
target=3D"_top">http://git.yoctoproject.org/cgit.cgi</A>                =
is the=20
combination of all supported boards and configurations.</P>
<P>The technique the Yocto Project team uses is flexible and allows for =
seamless=20
               blending of an immutable history with additional patches =
specific=20
to a                deployment.                Any additions to the =
kernel=20
become an integrated part of the branches.</P></DIV>
<P></P></DIV>
<DIV title=3D"B.2.&nbsp;Build Strategy" class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"build-strategy"></A>B.2.&nbsp;Build Strategy<SPAN =
class=3D"permalink"><A=20
title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#b=
uild-strategy"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>            Once a local Git repository of the Yocto Project kernel =
exists on=20
a development system,            you can consider the compilation phase =
of=20
kernel development - building a kernel image.            Some =
prerequisites=20
exist that are validated by the build process before compilation         =
  =20
starts:         </P>
<DIV class=3D"itemizedlist">
<UL class=3D"itemizedlist" type=3D"disc">
  <LI class=3D"listitem">
  <P>The                 <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-SRC_URI"=20
  target=3D"_top"><CODE class=3D"filename">SRC_URI</CODE></A> points     =
          =20
  to the kernel Git repository.</P></LI>
  <LI class=3D"listitem">
  <P>A BSP build branch exists.                This branch has the =
following=20
  form:                 </P>
<PRE class=3D"literallayout">     <EM =
class=3D"replaceable"><CODE>kernel_type</CODE></EM>/<EM =
class=3D"replaceable"><CODE>bsp_name</CODE></EM>=0A=
                </PRE></LI></UL></DIV>
<P>            The OpenEmbedded build system makes sure these conditions =
exist=20
before attempting compilation.            Other means, however, do =
exist, such=20
as as bootstrapping a BSP.         </P>
<P>            Before building a kernel, the build process verifies the =
tree    =20
       and configures the kernel by processing all of the           =20
configuration "fragments" specified by feature descriptions in the <CODE =
class=3D"filename">.scc</CODE>=20
           files.            As the features are compiled, associated =
kernel=20
configuration fragments are noted            and recorded in the <CODE =
class=3D"filename">meta-*</CODE>=20
series of directories in their compilation order.            The =
fragments are=20
migrated, pre-processed and passed to the Linux Kernel            =
Configuration=20
subsystem (<CODE class=3D"filename">lkc</CODE>) as raw input in the form =
         =20
 of a <CODE class=3D"filename">.config</CODE> file.            The <CODE =
class=3D"filename">lkc</CODE>=20
uses its own internal dependency constraints to do the final           =20
processing of that information and generates the final <CODE=20
class=3D"filename">.config</CODE> file            that is used during =
compilation.=20
        </P>
<P>            Using the board's architecture and other relevant values =
from the=20
board's template,            kernel compilation is started and a kernel =
image is=20
produced.         </P>
<P>            The other thing that you notice once you configure a =
kernel is=20
that            the build process generates a build tree that is =
separate from=20
your kernel's local Git            source repository tree.            =
This build=20
tree has a name that uses the following form, where             <CODE =
class=3D"filename">${MACHINE}</CODE>=20
is the metadata name of the machine (BSP) and "kernel_type" is one       =
     of=20
the Yocto Project supported kernel types (e.g. "standard"):         </P>
<PRE class=3D"literallayout">     linux-${MACHINE}-<EM =
class=3D"replaceable"><CODE>kernel_type</CODE></EM>-build=0A=
        </PRE>
<P></P>
<P>            The existing support in the <CODE=20
class=3D"filename">kernel.org</CODE> tree achieves this            =
default=20
functionality.         </P>
<P>            This behavior means that all the generated files for a =
particular=20
machine or BSP are now in            the build tree directory.           =
 The=20
files include the final <CODE class=3D"filename">.config</CODE> file, =
all the=20
<CODE class=3D"filename">.o</CODE>            files, the <CODE=20
class=3D"filename">.a</CODE> files, and so forth.            Since each =
machine or=20
BSP has its own separate             <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#b=
uild-directory"=20
target=3D"_top">Build Directory</A>            in its own separate =
branch         =20
  of the Git repository, you can easily switch between different builds. =
       =20
</P></DIV></DIV>
<DIV title=3D"Appendix&nbsp;C.&nbsp;Kernel Development FAQ" =
class=3D"appendix">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title"><A =
id=3D"kernel-dev-faq"></A>Appendix&nbsp;C.&nbsp;Kernel=20
Development FAQ<SPAN class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-faq"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<DIV class=3D"toc">
<P><STRONG>Table of Contents</STRONG></P>
<DL>
  <DT><SPAN class=3D"section"><A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-faq-section">C.1.=20
  Common Questions and Solutions</A></SPAN></DT></DL></DIV>
<DIV title=3D"C.1.&nbsp;Common Questions and Solutions" =
class=3D"section">
<DIV class=3D"titlepage">
<DIV>
<DIV>
<H2 class=3D"title" style=3D"clear: both;"><A=20
id=3D"kernel-dev-faq-section"></A>C.1.&nbsp;Common Questions and =
Solutions<SPAN=20
class=3D"permalink"><A title=3D"Permalink" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#k=
ernel-dev-faq-section"=20
alt=3D"Permalink">=C2=B6</A></SPAN></H2></DIV></DIV></DIV>
<P>        The following lists some solutions for common questions.      =
   </P>
<DIV title=3D"Frequently Asked Questions" class=3D"qandaset"><A =
id=3D"idm46153756438752"></A>
<DL>
  <DT>C.1.1. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153756438592">=20
                         How do I use my own Linux kernel .config        =
       =20
          file?                     </A></DT>
  <DT>C.1.2. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153754608752">=20
                         How do I create configuration fragments?        =
       =20
       </A></DT>
  <DT>C.1.3. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153754606912">=20
                         How do I use my own Linux kernel sources?       =
       =20
        </A></DT>
  <DT>C.1.4. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153754605072">=20
                         How do I install/not-install the kernel image =
on the=20
  rootfs?                     </A></DT>
  <DT>C.1.5. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153757430448">=20
                         How do I install a specific kernel module?      =
       =20
         </A></DT>
  <DT>C.1.6. <A =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
dm46153757427664">=20
                         How do I change the Linux kernel command line?  =
       =20
            </A></DT></DL>
<TABLE width=3D"100%" border=3D"0" summary=3D"Q and A Set">
  <COLGROUP>
  <COL width=3D"1%" align=3D"left">
  <COL>
  <TBODY>
  <TR title=3D"C.1.1." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153756438592"></A><A =
id=3D"idm46153756438432"></A>
      <P><STRONG>C.1.1.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I use my own Linux kernel <CODE =
class=3D"filename">.config</CODE>=20
                             file?                     </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        Refer to the "<A =
title=3D"2.2.3.&nbsp;Changing the Configuration"=20
      class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#c=
hanging-the-configuration">Changing=20
      the Configuration</A>"                        section for =
information.    =20
                      </P></TD></TR>
  <TR title=3D"C.1.2." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153754608752"></A><A =
id=3D"idm46153754608624"></A>
      <P><STRONG>C.1.2.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I create configuration =
fragments?       =20
                   </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        Refer to the "<A =
title=3D"2.3.2.&nbsp;Generating Configuration Files"=20
      class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#g=
enerating-configuration-files">Generating=20
      Configuration Files</A>"                        section for =
information.  =20
                        </P></TD></TR>
  <TR title=3D"C.1.3." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153754606912"></A><A =
id=3D"idm46153754606784"></A>
      <P><STRONG>C.1.3.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I use my own Linux kernel =
sources?      =20
                    </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        Refer to the "<A =
title=3D"2.4.&nbsp;Working With Your Own Sources"=20
      class=3D"link" =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#w=
orking-with-your-own-sources">Working=20
      With Your Own Sources</A>"                        section for =
information.=20
                          </P></TD></TR>
  <TR title=3D"C.1.4." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153754605072"></A><A =
id=3D"idm46153754604944"></A>
      <P><STRONG>C.1.4.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I install/not-install the kernel =
image=20
      on the rootfs?                     </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        The kernel image (e.g. <CODE=20
      class=3D"filename">vmlinuz</CODE>) is provided                     =
   by the=20
      <CODE class=3D"filename">kernel-image</CODE> package.              =
         =20
      Image recipes depend on <CODE =
class=3D"filename">kernel-base</CODE>.        =20
                     To specify whether or not the kernel                =
       =20
      image is installed in the generated root filesystem, override      =
       =20
                 <CODE class=3D"filename">RDEPENDS_kernel-base</CODE> to =
include=20
      or not                        include "kernel-image".</P>
      <P>See the                        "<A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/dev-manual/dev-manual.html#u=
sing-bbappend-files"=20
      target=3D"_top">Using .bbappend Files</A>"                        =
section in=20
      the Yocto Project Development Manual for information on            =
       =20
          how to use an append file to override metadata.                =
    =20
      </P></TD></TR>
  <TR title=3D"C.1.5." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153757430448"></A><A =
id=3D"idm46153757430320"></A>
      <P><STRONG>C.1.5.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I install a specific kernel =
module?     =20
                     </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        Linux kernel modules are packaged =
individually.=20
                             To ensure a specific kernel module is =
included in=20
      an image,                        include it in the appropriate =
machine    =20
                          <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-RRECOMMENDS"=20
      target=3D"_top"><CODE class=3D"filename">RRECOMMENDS</CODE></A>    =
           =20
              variable.</P>
      <P>These other variables are useful for installing specific        =
       =20
              modules:                         </P>
<PRE class=3D"literallayout">     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_ESSENTIAL_EXTRA_RDEPENDS" target=3D"_top"><CODE =
class=3D"filename">MACHINE_ESSENTIAL_EXTRA_RDEPENDS</CODE></A>=0A=
     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS" target=3D"_top"><CODE =
class=3D"filename">MACHINE_ESSENTIAL_EXTRA_RRECOMMENDS</CODE></A>=0A=
     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_EXTRA_RDEPENDS" target=3D"_top"><CODE =
class=3D"filename">MACHINE_EXTRA_RDEPENDS</CODE></A>=0A=
     <A class=3D"ulink" =
href=3D"http://www.yoctoproject.org/docs/2.1/ref-manual/ref-manual.html#v=
ar-MACHINE_EXTRA_RRECOMMENDS" target=3D"_top"><CODE =
class=3D"filename">MACHINE_EXTRA_RRECOMMENDS</CODE></A>=0A=
                        </PRE>
      <P>                        For example, set the following in the =
<CODE=20
      class=3D"filename">qemux86.conf</CODE>                        file =
to=20
      include the <CODE class=3D"filename">ab123</CODE> kernel modules   =
         =20
                 with images built for the <CODE =
class=3D"filename">qemux86</CODE>=20
      machine:                         </P>
<PRE class=3D"literallayout">     MACHINE_EXTRA_RRECOMMENDS +=3D =
"kernel-module-ab123"=0A=
                        </PRE>
      <P>                        For more information, see the           =
       =20
           "<A title=3D"2.5.2.&nbsp;Incorporating Out-of-Tree Modules" =
class=3D"link"=20
      =
href=3D"http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev.html#i=
ncorporating-out-of-tree-modules">Incorporating=20
      Out-of-Tree Modules</A>"                        section.           =
       =20
        </P></TD></TR>
  <TR title=3D"C.1.6." class=3D"question">
    <TD align=3D"left" valign=3D"top"><A id=3D"idm46153757427664"></A><A =
id=3D"idm46153757581008"></A>
      <P><STRONG>C.1.6.</STRONG></P></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        How do I change the Linux kernel =
command line? =20
                        </P></TD></TR>
  <TR class=3D"answer">
    <TD align=3D"left" valign=3D"top"></TD>
    <TD align=3D"left" valign=3D"top">
      <P>                        The Linux kernel command line is =
typically=20
      specified in                        the machine config using the =
<CODE=20
      class=3D"filename">APPEND</CODE> variable.                For =
example, you=20
      can add some helpful debug information doing                       =
 the=20
      following:                         </P>
<PRE class=3D"literallayout">     APPEND +=3D "printk.time=3Dy =
initcall_debug debug"=0A=
                        </PRE>
      <P></P></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV></DIV></DIV></BODY></HTML>

------=_NextPart_000_0000_01D1F6DA.FE395A50
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.yoctoproject.org/docs/2.1/kernel-dev/figures/kernel-architecture-overview.png

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

------=_NextPart_000_0000_01D1F6DA.FE395A50
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.yoctoproject.org/docs/2.1/kernel-dev/kernel-dev-style.css

body {
	margin: 0em auto; padding: 2em 5em 5em; width: 80%; color: rgb(51, 51, =
51); font-family: Verdana, Sans, sans-serif; min-width: 640px;
}
h1 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h2 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h3 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h4 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h5 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h6 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h7 {
	color: rgb(0, 85, 125); clear: both; font-family: Arial, Sans;
}
h1 {
	margin: 2em 0em 0em; padding: 0em; text-align: left; font-size: 2em;
}
h2.subtitle {
	margin: 0.1em 0em 3em; padding: 0em 0em 0em 20%; font-size: 1.8em; =
font-style: italic; font-weight: normal;
}
h2 {
	margin: 2em 0em 0.66em; padding: 0.5em 0em 0em; font-size: 1.5em; =
font-weight: bold;
}
h3.subtitle {
	margin: 0em 0em 1em; padding: 0em; text-align: right; font-size: =
142.14%;
}
h3 {
	margin: 1em 0em 0.5em; padding: 1em 0em 0em; font-size: 140%; =
font-weight: bold;
}
h4 {
	margin: 1em 0em 0.5em; padding: 1em 0em 0em; font-size: 120%; =
font-weight: bold;
}
h5 {
	margin: 1em 0em 0.5em; padding: 1em 0em 0em; font-size: 110%; =
font-weight: bold;
}
h6 {
	margin: 1em 0em 0em; padding: 1em 0em 0em; font-size: 110%; =
font-weight: bold;
}
.authorgroup {
	background-position: left top; width: 740px; text-align: right; =
padding-top: 256px; padding-right: 50px; margin-top: -256px; =
margin-left: 0px; background-image: url("figures/kernel-dev-title.png"); =
background-repeat: no-repeat; background-color: transparent;
}
h3.author {
	padding: 0em; color: rgb(51, 51, 51); clear: both; font-size: 100%; =
font-weight: normal;
}
.author tt.email {
	font-size: 66%;
}
.titlepage hr {
	width: 0em; clear: both;
}
.revhistory {
	padding-top: 2em; clear: both;
}
.toc {
	padding: 1.33em 0em 2.5em; color: rgb(0, 85, 125);
}
.list-of-tables {
	padding: 1.33em 0em 2.5em; color: rgb(0, 85, 125);
}
.list-of-examples {
	padding: 1.33em 0em 2.5em; color: rgb(0, 85, 125);
}
.list-of-figures {
	padding: 1.33em 0em 2.5em; color: rgb(0, 85, 125);
}
.toc p {
	margin: 1.5em 0em 0em; padding: 0em 0em 0.3em;
}
.list-of-tables p {
	margin: 1.5em 0em 0em; padding: 0em 0em 0.3em;
}
.list-of-figures p {
	margin: 1.5em 0em 0em; padding: 0em 0em 0.3em;
}
.list-of-examples p {
	margin: 1.5em 0em 0em; padding: 0em 0em 0.3em;
}
.toc p b {
	font-size: 100%; font-weight: bold;
}
.list-of-tables p b {
	font-size: 100%; font-weight: bold;
}
.list-of-figures p b {
	font-size: 100%; font-weight: bold;
}
.list-of-examples p b {
	font-size: 100%; font-weight: bold;
}
.toc dl {
	margin: 0em 0em 0.5em; padding: 0em;
}
.list-of-tables dl {
	margin: 0em 0em 0.5em; padding: 0em;
}
.list-of-figures dl {
	margin: 0em 0em 0.5em; padding: 0em;
}
.list-of-examples dl {
	margin: 0em 0em 0.5em; padding: 0em;
}
.toc dt {
	margin: 0em; padding: 0em;
}
.toc dd {
	margin: 0em 0em 0em 2.6em; padding: 0em;
}
div.glossary dl {
=09
}
div.variablelist dl {
=09
}
.glossary dl dt {
	width: 20em; text-align: right; font-weight: normal;
}
.variablelist dl dt {
	width: 20em; text-align: right; font-weight: normal;
}
.variablelist dl dt span.term {
	width: 20em; text-align: right; font-weight: normal;
}
.variablelist dl dt {
	margin-top: 0.5em;
}
.glossary dl dd {
	margin-top: -1em; margin-left: 25.5em;
}
.variablelist dl dd {
	margin-top: -1em; margin-left: 25.5em;
}
.glossary dd p {
	margin-top: 0em; margin-bottom: 1em;
}
.variablelist dd p {
	margin-top: 0em; margin-bottom: 1em;
}
div.calloutlist table td {
	margin: 0em; padding: 0em;
}
div.calloutlist table td p {
	margin-top: 0em; margin-bottom: 1em;
}
div p.copyright {
	text-align: left;
}
div.legalnotice p.legalnotice-title {
	margin-bottom: 0em;
}
p {
	line-height: 1.5em; margin-top: 0em;
}
dl {
	padding-top: 0em;
}
hr {
	border: 1px solid currentColor; border-image: none;
}
.mediaobject {
	text-align: center;
}
.mediaobjectco {
	text-align: center;
}
img {
	border: currentColor; border-image: none;
}
ul {
	padding: 0em 0em 0em 1.5em;
}
ul li {
	padding: 0em;
}
ul li p {
	text-align: left;
}
table {
	width: 100%;
}
th {
	padding: 0.25em; text-align: left; font-weight: normal; vertical-align: =
top;
}
td {
	padding: 0.25em; vertical-align: top;
}
p a[id] {
	margin: 0px; padding: 0px; display: inline; background-image: none;
}
a {
	color: rgb(68, 68, 68); text-decoration: underline;
}
pre {
	overflow: auto;
}
a:hover {
	text-decoration: underline;
}
[alt=3D'Permalink'] {
	color: rgb(238, 238, 238);
}
[alt=3D'Permalink']:hover {
	color: black;
}
div.informalfigure {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.informalexample {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.informaltable {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.figure {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.table {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.example {
	margin: 1em 0em; padding: 1em; page-break-inside: avoid;
}
div.informalfigure p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
div.informalexample p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
div.informaltable p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
div.figure p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
div.example p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
div.table p.title b {
	padding-top: 0em; font-size: 100%; font-weight: normal; margin-top: =
0em;
}
.mediaobject .caption {
	text-align: center; padding-top: 0.5em; padding-bottom: 0.5em; =
font-size: 80%;
}
.mediaobject .caption p {
	text-align: center; padding-top: 0.5em; padding-bottom: 0.5em; =
font-size: 80%;
}
.epigraph {
	padding-left: 55%; margin-bottom: 1em;
}
.epigraph p {
	text-align: left;
}
.epigraph .quote {
	font-style: italic;
}
.epigraph .attribution {
	text-align: right; font-style: normal;
}
span.application {
	font-style: italic;
}
.programlisting {
	margin: 1.33em 0em; padding: 1.33em; font-family: monospace; font-size: =
80%; white-space: pre;
}
.tip {
	margin-top: 1em; margin-bottom: 1em;
}
.warning {
	margin-top: 1em; margin-bottom: 1em;
}
.caution {
	margin-top: 1em; margin-bottom: 1em;
}
.note {
	margin-top: 1em; margin-bottom: 1em;
}
.tip table {
	border: currentColor; border-image: none; width: 100%;
}
.warning table {
	border: currentColor; border-image: none; width: 100%;
}
.caution table {
	border: currentColor; border-image: none; width: 100%;
}
.note table {
	border: currentColor; border-image: none; width: 100%;
}
.tip table th {
	margin: 0em; padding: 0.8em 0em 0em;
}
.warning table th {
	margin: 0em; padding: 0.8em 0em 0em;
}
.caution table th {
	margin: 0em; padding: 0.8em 0em 0em;
}
.note table th {
	margin: 0em; padding: 0.8em 0em 0em;
}
.tip p {
	text-align: left; padding-right: 1em; margin-top: 0.5em; margin-bottom: =
0.5em;
}
.warning p {
	text-align: left; padding-right: 1em; margin-top: 0.5em; margin-bottom: =
0.5em;
}
.caution p {
	text-align: left; padding-right: 1em; margin-top: 0.5em; margin-bottom: =
0.5em;
}
.note p {
	text-align: left; padding-right: 1em; margin-top: 0.5em; margin-bottom: =
0.5em;
}
.acronym {
	text-transform: uppercase;
}
b.keycap {
	margin: 0em; padding: 0.09em 0.3em;
}
.keycap {
	margin: 0em; padding: 0.09em 0.3em;
}
.itemizedlist li {
	clear: none;
}
.filename {
	font-family: Courier, monospace; font-size: medium;
}
div.navheader {
	left: 0em; top: 0em; width: 100%; position: absolute; background-color: =
rgb(204, 221, 255);
}
div.heading {
	left: 0em; top: 0em; width: 100%; position: absolute; background-color: =
rgb(204, 221, 255);
}
div.navfooter {
	left: 0em; width: 100%; bottom: 0em; position: fixed; background-color: =
rgb(238, 238, 238);
}
div.footing {
	left: 0em; width: 100%; bottom: 0em; position: fixed; background-color: =
rgb(238, 238, 238);
}
div.navheader td {
	font-size: 66%;
}
div.navfooter td {
	font-size: 66%;
}
div.navheader table th {
	font-size: 80%;
}
div.navheader table {
	width: 100%; border-top-color: currentColor; border-right-color: =
currentColor; border-left-color: currentColor; border-top-width: 0em; =
border-right-width: 0em; border-left-width: 0em; border-top-style: none; =
border-right-style: none; border-left-style: none;
}
div.navfooter table {
	width: 100%; border-right-color: currentColor; border-bottom-color: =
currentColor; border-left-color: currentColor; border-right-width: 0em; =
border-bottom-width: 0em; border-left-width: 0em; border-right-style: =
none; border-bottom-style: none; border-left-style: none;
}
div.navheader table td a {
	color: rgb(119, 119, 119); text-decoration: none;
}
div.navfooter table td a {
	color: rgb(119, 119, 119); text-decoration: none;
}
div.navfooter table td {
	color: black;
}
div.navheader table td a:visited {
	color: rgb(68, 68, 68);
}
div.navfooter table td a:visited {
	color: rgb(68, 68, 68);
}
div.navheader table td a:hover {
	color: rgb(51, 51, 170); text-decoration: underline; background-color: =
transparent;
}
div.navfooter table td a:hover {
	color: rgb(51, 51, 170); text-decoration: underline; background-color: =
transparent;
}
div.navheader hr {
	display: none;
}
div.navfooter hr {
	display: none;
}
.qandaset tr.question td p {
	margin: 0em 0em 1em; padding: 0em;
}
.qandaset tr.answer td p {
	margin: 0em 0em 1em; padding: 0em;
}
.answer td {
	padding-bottom: 1.5em;
}
.emphasis {
	font-weight: bold;
}
.titlepage {
=09
}
.part .title {
=09
}
.subtitle {
	border: currentColor; border-image: none;
}
.programlisting {
	border: 1px solid currentColor; border-image: none;
}
div.figure {
	border: 1px solid currentColor; border-image: none;
}
div.table {
	border: 1px solid currentColor; border-image: none;
}
div.informalfigure {
	border: 1px solid currentColor; border-image: none;
}
div.informaltable {
	border: 1px solid currentColor; border-image: none;
}
div.informalexample {
	border: 1px solid currentColor; border-image: none;
}
div.example {
	border: 1px solid currentColor; border-image: none;
}
.tip {
	border: 1px solid currentColor; border-image: none;
}
.warning {
	border: 1px solid currentColor; border-image: none;
}
.caution {
	border: 1px solid currentColor; border-image: none;
}
.note {
	border: 1px solid currentColor; border-image: none;
}
.tip table th {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
.warning table th {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
.caution table th {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
.note table th {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
.question td {
	border-top-color: black; border-top-width: 1px; border-top-style: =
solid;
}
.answer {
=09
}
b.keycap {
	border: 1px solid currentColor; border-image: none;
}
.keycap {
	border: 1px solid currentColor; border-image: none;
}
div.navheader {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
div.heading {
	border-bottom-color: currentColor; border-bottom-width: 1px; =
border-bottom-style: solid;
}
div.navfooter {
	border-top-color: currentColor; border-top-width: 1px; =
border-top-style: solid;
}
div.footing {
	border-top-color: currentColor; border-top-width: 1px; =
border-top-style: solid;
}
body {
	background: white; color: rgb(51, 51, 51);
}
a {
	background: none;
}
a:hover {
	background-color: rgb(222, 222, 222);
}
h1 {
	background-color: transparent;
}
h2 {
	background-color: transparent;
}
h3 {
	background-color: transparent;
}
h4 {
	background-color: transparent;
}
h5 {
	background-color: transparent;
}
h6 {
	background-color: transparent;
}
h7 {
	background-color: transparent;
}
h8 {
	background-color: transparent;
}
hr {
	border-color: rgb(170, 170, 170);
}
.tip {
	border-color: rgb(255, 255, 255);
}
.warning {
	border-color: rgb(255, 255, 255);
}
.caution {
	border-color: rgb(255, 255, 255);
}
.note {
	border-color: rgb(255, 255, 255);
}
.tip table th {
	border-bottom-color: rgb(255, 255, 255);
}
.warning table th {
	border-bottom-color: rgb(255, 255, 255);
}
.caution table th {
	border-bottom-color: rgb(255, 255, 255);
}
.note table th {
	border-bottom-color: rgb(255, 255, 255);
}
.warning {
	background-color: rgb(240, 240, 242);
}
.caution {
	background-color: rgb(240, 240, 242);
}
.tip {
	background-color: rgb(240, 240, 242);
}
.note {
	background-color: rgb(240, 240, 242);
}
.glossary dl dt {
	color: rgb(0, 68, 68);
}
.variablelist dl dt {
	color: rgb(0, 68, 68);
}
.variablelist dl dt span.term {
	color: rgb(0, 68, 68);
}
div.figure {
	border-color: rgb(170, 170, 170);
}
div.table {
	border-color: rgb(170, 170, 170);
}
div.example {
	border-color: rgb(170, 170, 170);
}
div.informalfigure {
	border-color: rgb(170, 170, 170);
}
div.informaltable {
	border-color: rgb(170, 170, 170);
}
div.informalexample {
	border-color: rgb(170, 170, 170);
}
pre.programlisting {
	border-width: 2px; border-color: rgb(170, 170, 170); color: black; =
background-color: rgb(255, 255, 255);
}
.guimenu {
	background-color: rgb(238, 238, 238);
}
.guilabel {
	background-color: rgb(238, 238, 238);
}
.guimenuitem {
	background-color: rgb(238, 238, 238);
}
b.keycap {
	border-color: rgb(153, 153, 153); background-color: rgb(238, 238, 238);
}
.keycap {
	border-color: rgb(153, 153, 153); background-color: rgb(238, 238, 238);
}
div.navheader {
	border-color: black;
}
div.navfooter {
	border-color: black;
}
h1 {
=09
}
h2 {
=09
}
h3 {
=09
}
h4 {
=09
}
h5 {
=09
}
h6 {
=09
}
h7 {
=09
}
div.preface .titlepage .title {
=09
}
div.colophon .title {
=09
}
div.chapter .titlepage .title {
=09
}
div.article .titlepage .title {
=09
}
div.section div.section .titlepage .title {
	background: none;
}
div.sect2 .titlepage .title {
	background: none;
}
h1.title {
	height: 256px; text-indent: -9000px; overflow: hidden; =
background-repeat: no-repeat; background-color: transparent;
}
h2.subtitle {
	width: 0px; text-indent: -9000px; overflow: hidden; display: none; =
background-color: transparent;
}
table tr td table tr td {
	display: none;
}
hr {
	display: none;
}
table {
	border: 0em currentColor; border-image: none;
}
.photo {
	background: white; padding: 3px; border: 1px solid gray; border-image: =
none; margin-top: 0em; margin-bottom: 1.5em; margin-left: 1.5em; float: =
right; max-width: 17em;
}
.seperator {
	padding-top: 2em; clear: both;
}
#validators {
	text-align: right; color: rgb(119, 119, 119); margin-top: 5em;
}
@media print
{
body {
	font-size: 8pt;
}
.noprint {
	display: none;
}
}
.tip {
	background: rgb(240, 240, 242); margin: 20px; padding: 20px; color: =
rgb(51, 51, 51);
}
.note {
	background: rgb(240, 240, 242); margin: 20px; padding: 20px; color: =
rgb(51, 51, 51);
}
.tip h3 {
	margin: 0em; padding: 0em; color: rgb(51, 51, 51); font-size: 2em; =
font-weight: bold;
}
.note h3 {
	margin: 0em; padding: 0em; color: rgb(51, 51, 51); font-size: 2em; =
font-weight: bold;
}
.tip a {
	color: rgb(51, 51, 51); text-decoration: underline;
}
.note a {
	color: rgb(51, 51, 51); text-decoration: underline;
}
.footnote {
	color: rgb(51, 51, 51); font-size: small;
}
.tip h3 {
	color: rgb(0, 85, 125); font-size: large;
}
.warning h3 {
	color: rgb(0, 85, 125); font-size: large;
}
.caution h3 {
	color: rgb(0, 85, 125); font-size: large;
}
.note h3 {
	color: rgb(0, 85, 125); font-size: large;
}

------=_NextPart_000_0000_01D1F6DA.FE395A50--
