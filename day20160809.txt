1.MCU和4G模块交互的部分
		//通信协议见 svn://127.0.0.1/TCU/doc/v1.0/MCU&4G通讯协议.docx
	main (tcu4GNetServer.c)	
		//接收MCU串口数据
		uart_server_start
			RingBufferInit(uart_server.recv_rbuf,UARTSERVER_RECV_RBUF_SIZE)
			open(uart_4g, O_RDWR|O_NOCTTY|O_NDELAY)
			pthread_create(&uart_server.thread_recv_id, NULL, uart_monitor_recv, NULL)
				//线程开始Running
				uart_monitor_recv
					read(uart_server.fd,buffer,UARTSERVER_RECV_BUF_SIZE)
					CbWrite(uart_server.recv_rbuf, buffer, len)
		//4G模块创建服务器
		da_server_start
			//DA连接上来的时候发送过来的数据存放net_recv_rbuf
			RingBufferInit(da_server.net_recv_rbuf,DASERVER_RECV_RBUF_SIZE)
			//socket创建流程
			......
			//创建线程,用于接收DA的数据
			pthread_create(&da_server.thread_recv_id, NULL, da_handle_recv, NULL);
					//线程开始Running
					da_handle_recv
						 //客服端socket句柄
						 da_server.client_socket = accept(da_server.server_socket, (struct sockaddr *)&da_server.client_addr, &sin_size );
						 //接收数据
						 recv(da_server.client_socket, buf, sizeof(buf), 0);
						 CbWrite(da_server.net_recv_rbuf, buf, len);
		//数据解析线程
		parse_server_start
			//1 创建MCU数据处理线程
			pthread_create(&parse_server.thread_parse_uart_id, NULL, parse_uart_recv_data, NULL);
					//解析收到MCU的数据
					parse_uart_recv_data
							parse_data(uart_server.recv_rbuf, UART_PORT);
																						//Code中用packet_work_type来存储
							| Header | Lenght | Version | LogicId | Encrypt | Data 		|  CRC	 | Ending |
							| 2Bytes | 2Bytes | 2Bytes  |  2Bytes | 1Byte		|  NBytes | 2Bytes | 2Bytes |
									//1.1 不停调用
									CbReadOne 
											//修改read_index
											ring_buffer->cb.read_index = (ring_buffer->cb.read_index + 1) % ring_buffer->cb.size;
									//1.2 如果前面8Byte没有出现错误
									ReturnToPre(rbuf);
											//修改指针指向Header
											ring_buffer->cb.read_index = ring_buffer->cb.pre_read_index;
									//1.3 user_data指向Data
									memcpy(user_data, buf+DATA_OFFSET, user_data_len);		
									//判断结尾,如果正确
									PreToCurrentRead(rbuf);
											//修改pre_read_index
											ring_buffer->cb.pre_read_index = ring_buffer->cb.read_index;
									//1.4 根据上面通信协议文档的 3.5.2 协议版本的定义 判断Version的最高字节
									//1.5 如果是日产TCU 4G&Da协议,将Uart数据发送给DA
									//TCU通过4G将数据发送给后台
									if(Version==0x05)
										back_send_packet(buf, packet_all_len);															
									//TCU通过4G模块发送给DA模块
									else if(Version==0x06)
										da_send_packet(buf, packet_all_len);
									//TCU和4G模块通信
									else if(Version==0x07)
										handle_work(packet_work_type,user_data,user_data_len);
			//2 创建DA数据处理线程							
			pthread_create(&parse_server.thread_parse_da_id, NULL, parse_da_recv_data, NULL);
					//解析收到的DA的数据
					parse_da_recv_data
							parse_data(uart_server.recv_rbuf, DA_PORT);
									// 同上1.1 ~ 1.4
									//1.5 如果是日产TCU 4G&Da协议,将DA数据发送给MCU
									uart_send_packet(buf, packet_all_len);
			