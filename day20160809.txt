1.MCU和4G模块交互的部分
		//通信协议见 svn://127.0.0.1/TCU/doc/v1.0/MCU&4G通讯协议.docx
	main (tcu4GNetServer.c)	
		//1. 接收MCU串口数据
		uart_server_start
			RingBufferInit(uart_server.recv_rbuf,UARTSERVER_RECV_RBUF_SIZE)
			open(uart_4g, O_RDWR|O_NOCTTY|O_NDELAY)
			pthread_create(&uart_server.thread_recv_id, NULL, uart_monitor_recv, NULL)
				//线程开始Running
				uart_monitor_recv
					read(uart_server.fd,buffer,UARTSERVER_RECV_BUF_SIZE)
					CbWrite(uart_server.recv_rbuf, buffer, len)
		//2. 接收DA模块数据
		da_server_start
			//DA连接上来的时候发送过来的数据存放net_recv_rbuf
			RingBufferInit(da_server.net_recv_rbuf,DASERVER_RECV_RBUF_SIZE)
			//socket创建流程
			......
			//创建线程,用于接收DA的数据
			pthread_create(&da_server.thread_recv_id, NULL, da_handle_recv, NULL);
					//线程开始Running
					da_handle_recv
						 //客服端socket句柄
						 da_server.client_socket = accept(da_server.server_socket, (struct sockaddr *)&da_server.client_addr, &sin_size );
						 //接收数据
						 recv(da_server.client_socket, buf, sizeof(buf), 0);
						 CbWrite(da_server.net_recv_rbuf, buf, len);
		//3. 数据解析线程
		parse_server_start
			//3.1 创建MCU数据处理线程
			pthread_create(&parse_server.thread_parse_uart_id, NULL, parse_uart_recv_data, NULL);
					//解析收到MCU的数据
					parse_uart_recv_data
							parse_data(uart_server.recv_rbuf, UART_PORT);
																						//Code中用packet_work_type来存储
							| Header | Lenght | Version | LogicId | Encrypt | Data		|  CRC	 | Ending |
							| 2Bytes | 2Bytes | 2Bytes  |  2Bytes | 1Byte		| NBytes	| 2Bytes | 2Bytes |
									//3.1.1 不停调用
									CbReadOne 
											//修改read_index
											ring_buffer->cb.read_index = (ring_buffer->cb.read_index + 1) % ring_buffer->cb.size;
									//3.1.2 如果前面8Byte没有出现错误
									ReturnToPre(rbuf);
											//修改指针指向Header
											ring_buffer->cb.read_index = ring_buffer->cb.pre_read_index;
									//3.1.3 user_data指向Data
									memcpy(user_data, buf+DATA_OFFSET, user_data_len);		
									//判断结尾,如果正确
									PreToCurrentRead(rbuf);
											//修改pre_read_index
											ring_buffer->cb.pre_read_index = ring_buffer->cb.read_index;
									//3.1.4 根据上面通信协议文档的 3.5.2 协议版本的定义 判断Version的最高字节
									//3.1.5 如果是日产TCU 4G&Da协议,将Uart数据发送给DA
									//TCU通过4G将数据发送给后台
									if(Version==0x05)
										back_send_packet(buf, packet_all_len);															
									//TCU通过4G模块发送给DA模块
									else if(Version==0x06)
										da_send_packet(buf, packet_all_len);
									//TCU和4G模块通信
									else if(Version==0x07)
										handle_work(packet_work_type,user_data,user_data_len);
												//根据文档 svn://127.0.0.1/TCU/doc/v1.0/TCU&DA通讯协议.docx 文档来进行解析
																和 svn://127.0.0.1/TCU/doc/v1.0/MCU&4G通讯协议.docx
												//判断:packet_work_type
												//4G信号强度请求
												case 0x0202:
													tcu_device_info->work_id=0x0202;
													//如果没有获取到信号,阻塞
													pthread_cond_wait(&tcu_device_info->notEnd, &tcu_device_info->mutex);
												//TODO::流量统计
												case 0x0203:
													le_mdc_GetBytesCounters(&rxBytes, &txBytes)
												//TODO::4G模块休眠和唤醒
												case 0x0204:
													le_mrc_SetRadioPower(LE_OFF)
													le_mrc_SetRadioPower(LE_ON)
												//TODO::设置WIFI AP模式
												case 0x0403
													//见 http://legato.io/legato-docs/latest/c_le_wifi_ap.html
			//3.2 创建DA数据处理线程							
			pthread_create(&parse_server.thread_parse_da_id, NULL, parse_da_recv_data, NULL);
					//解析收到的DA的数据
					parse_da_recv_data
							parse_data(uart_server.recv_rbuf, DA_PORT);
									// 同上3.1.1 ~ 3.1.4
									//3.2.5 如果是日产TCU 4G&Da协议,将DA数据发送给MCU
									uart_send_packet(buf, packet_all_len);
		//4 一个循环
		//不停判断 3.1.5 中是否有设置
		switch(tcu_device_info->work_id)
			le_mrc_GetSignalQual(&tcu_device_info->signalQuality) 
			//发送信号
			pthread_cond_signal(&tcu_device_info->notEnd);
				
2.protobuf库是由哪些文件编译生成
./src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc
./src/google/protobuf/stubs/atomicops_internals_x86_msvc.cc
./src/google/protobuf/stubs/common.cc
./src/google/protobuf/stubs/once.cc
./src/google/protobuf/stubs/stringprintf.cc
./src/google/protobuf/stubs/strutil.cc
./src/google/protobuf/stubs/substitute.cc
./src/google/protobuf/stubs/structurally_valid.cc

./src/google/protobuf/io/coded_stream.cc
./src/google/protobuf/io/zero_copy_stream.cc
./src/google/protobuf/io/zero_copy_stream_impl_lite.cc
./src/google/protobuf/io/gzip_stream.cc
./src/google/protobuf/io/printer.cc
./src/google/protobuf/io/tokenizer.cc
./src/google/protobuf/io/zero_copy_stream_impl.cc

./src/google/protobuf/compiler/importer.cc

./src/google/protobuf/descriptor.cc
./src/google/protobuf/descriptor.pb.cc
./src/google/protobuf/descriptor_database.cc
./src/google/protobuf/dynamic_message.cc
./src/google/protobuf/extension_set_heavy.cc
./src/google/protobuf/generated_message_reflection.cc
./src/google/protobuf/message.cc
./src/google/protobuf/reflection_ops.cc
./src/google/protobuf/service.cc
./src/google/protobuf/text_format.cc
./src/google/protobuf/unknown_field_set.cc
./src/google/protobuf/wire_format.cc
./src/google/protobuf/extension_set.cc
./src/google/protobuf/generated_message_util.cc
./src/google/protobuf/message_lite.cc
./src/google/protobuf/repeated_field.cc
./src/google/protobuf/wire_format_lite.cc			