1.命令行输入cm --help执行的代码过程:
//任何App最先开始执行的程序
COMPONENT_INIT
	//1.得到参数
	const char* service = le_arg_GetArg(0); = --help
	const char* command = le_arg_GetArg(1); = NULL
		//1.1如果是帮助
		PrintAllHelp();
			//1.1.1遍历这个数组
			const cm_Service_t Services[] = {
		    /* SMS */
		    {
		        .serviceNamePtr = "sms",
		        .defaultCommandPtr = "help",
		        .helpHandler = cm_sms_PrintSmsHelp,
		        .commandHandler = cm_sms_ProcessSmsCommand,
		    },
		    ……
	    }
	    //1.1.2具体的帮助打印信息的输出
	    helpHandler();

		//1.2如果非帮助,如 cm radio on等
		ExecuteCommand(service, command, le_arg_NumArgs());	
			//1.2.1通过service在Services数组中比较名字,如果找到
			if(command = NULL)
				commandHandler(servicePtr->defaultCommandPtr = "help", numArgs); //当然这个默认值是上面的数组设置的
			else
				commandHandler(command, numArgs);	
						//1.2.1.1如果 command=info
						cm_info_ProcessInfoCommand(command, args)
							//1.2.1.1.1判断如果 command 是 help
							cm_info_PrintInfoHelp
2.4G数据处理的过程
main
	//注册三个数据分发的线程
	create4GDataDispatcher
		//注册后台数据分发函数
		registDataDispatcher(dispatchDataBy4GNet, FROME_4G_NET);
			dataDispatcher[FROME_4G_NET=2] = dispatchDataBy4GNet;	
		//创建数据处理线程
		createProtocolParseThread(cloudClient.net_recv_rbuf, FROME_4G_NET);
		
	createUartDataDispatcher
		//多注册一个串口数据的业务处理过程
		registBusinessHandler(handleBusinessData, FROME_UART);
			businessHandler[FROME_UART=0] = handleBusinessData;	
		//注册串口数据分发函数
		registDataDispatcher(dispatchDataByUart, FROME_UART);
			dataDispatcher[FROME_UART=0] = dispatchDataByUart;	
		//创建数据处理线程
		createProtocolParseThread(uart_server.recv_rbuf, FROME_UART);
		
	createUsbNetCardDataDispatcher	
		//注册DA数据分发函数
		registDataDispatcher(dispatchDataByUsbNetwork, FROME_USB_NET);
			dataDispatcher[FROME_USB_NET=1] = dispatchDataByUsbNetwork;	
		//创建数据处理线程
		parseThreadID = createProtocolParseThread(socketServer.net_recv_rbuf, FROME_USB_NET);
													pProtocolParser->rbuf = rbuf;
													pProtocolParser->from_port = from_port;
													pthread_create(&threadID, NULL, protocolParseThread, pProtocolParser)
															//协议数据包的处理过程
															protocolParseThread
																	ProtocolParser *pProtocolParser = (ProtocolParser *)arg;
																	//mcu、4G、
																	parse_data(pProtocolParser->rbuf, pProtocolParser->from_port);
																			//判断帧长后面两个字节 packet_protocol_type
																			if(packet_protocol_type[1]==0x05)
																			{
																					//表示与后台的通讯
																					dispatchDataBy4GNet(buf, len);
																			}
																			else if(packet_protocol_type[1]==0x06)
																			{
																					//表示与DA的通讯
																					dispatchDataByUsbNetwork(buf, len);
																			}
																			else if(packet_protocol_type[1]==0x07)
																			{
																					//表示与4G模块的通讯,直接进入业务处理,businessID为packet_protocol_type之后的两个字节
																					handleBusinessData(businessID, user_data,user_data_len);
																			}

